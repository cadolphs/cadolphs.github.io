{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Clemens Adolphs",
	"language": "en",
	"home_page_url": "https://cadolphs.github.io/",
	"feed_url": "https://cadolphs.github.io/feed/feed.json",
	"description": "Writing about software engineering",
	"author": {
		"name": "Clemens Adolphs",
		"url": "https://cadolphs.github.io/about-me/"
	},
	"items": [
		{
			"id": "https://cadolphs.github.io/blog/2021-06-15-rust-python-1/",
			"url": "https://cadolphs.github.io/blog/2021-06-15-rust-python-1/",
			"title": "Intro to Building Python Extensions in Rust",
			"content_html": "<p>Rust is <em>the</em> cool new systems programming language. It promises to be much safer than C/C++ while also offering a great toolchain for building\nand deploying, and lots of quality-of-life features we know and love from higher-level languages.</p>\n<p>One obvious use-case for any high-speed systems programming language is to write custom Python extensions in it. That way you get the\nease of use from Python without compromising on speed.</p>\n<p>To make this all work, let's figure out step by step how to build a custom Python extension in Rust. I'm assuming familiarity with both these\nlanguages; this isn't meant to be a Python or Rust tutorial.</p>\n<h1 id=\"simplest-case\" tabindex=\"-1\">Simplest Case <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h1>\n<p>Let's figure out how we can call a single, simple, Rust function from Python, where the Rust function doesn't have any complicated effects and just returns a simple type that's compatible with Python's types.</p>\n<p>Goal:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rust_module <span class=\"token keyword\">import</span> rust_function\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\nanswer <span class=\"token operator\">=</span> rust_function<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> answer <span class=\"token operator\">==</span> <span class=\"token number\">55</span></code></pre>\n<pre class=\"language-rust\" tabindex=\"0\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">rust_function</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n  arg <span class=\"token operator\">+</span> <span class=\"token number\">13</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"exploring-pyo3\" tabindex=\"-1\">Exploring PYO3 <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h2>\n<p>This seems to be the Rust module (crate) of choice. Or at least it is one of them. So I'll head over to their website and see what I need to do.</p>\n<p>Here's the <a href=\"https://pyo3.rs/v0.13.2/\">guide</a> and we're interested in the section <em>Using Rust from Python</em>.</p>\n<h2 id=\"the-cargo-toml\" tabindex=\"-1\">The Cargo.toml <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h2>\n<p>So, it seems we want to create a <strong>library crate</strong> where we tell Rust to use a particular <em>type</em> of crate to make a <em>shared library</em>. I'll try to do that via <code>cargo new</code>.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">cargo</span> new <span class=\"token parameter variable\">--lib</span> rust_module</code></pre>\n<p>This creates a new directory and basic package settings file (<code>Cargo.toml</code>) that we'll have to edit. We'll add the <code>cdylib</code> library target, and add PyO3 to the dependencies:</p>\n<pre class=\"language-toml\" tabindex=\"0\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rust_module\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Clemens Adolphs &lt;clemens.adolphs@gmail.com>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rust_module\"</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rlib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies.pyo3</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.13.2\"</span>\n<span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"extension-module\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>I'm adding the <code>rlib</code> target in case I want to add tests or code that can call this library from within Rust. The <code>cdylib</code> target tells cargo to compile a dynamic library (dylib) that code from C can talk to, or other programs that know how to talk to C libraries.</p>\n<h2 id=\"macos-cargo-config\" tabindex=\"-1\">MacOS: .cargo/config <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h2>\n<p>Apparently to compile our code on Mac, we also need to add an additional config file</p>\n<pre class=\"language-toml\" tabindex=\"0\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">target.x86_64-apple-darwin</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">rustflags</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"-C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"link-arg=-undefined\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"-C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"link-arg=dynamic_lookup\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">target.aarch64-apple-darwin</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">rustflags</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"-C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"link-arg=-undefined\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"-C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"link-arg=dynamic_lookup\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"the-lib-rs\" tabindex=\"-1\">The lib.rs <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h2>\n<p>Following along with the guide, we can now write our actual code. Let's first do it in the way the guide does, with the function returning a Python result directly.</p>\n<pre class=\"language-rust\" tabindex=\"0\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">pyo3<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">pyo3<span class=\"token punctuation\">::</span></span>wrap_pyfunction<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[pyfunction]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">rust_function</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">PyResult</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">+</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[pymodule]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">rust_module</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Python</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">PyModule</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">PyResult</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">add_function</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">wrap_pyfunction!</span><span class=\"token punctuation\">(</span>rust_function<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This seems quite nice and concise, actually. We grab all the stuff from the pyo3 prelude, as well as the <code>wrap_pyfunction</code> macro. The prelude gives us access to a number of commonly used definitions.</p>\n<p>So to turn an ordinary function into a function we can call from Python, all we have to do is tag it with <code>#[pyfuncion]</code> and wrap the return type in a <code>PyResult</code>.</p>\n<p>Then we need to add code that makes the function known to the Python module. For that, we have the <code>#[pymodule]</code> tag.</p>\n<p>The function name tagged with <code>pymodule</code> must be exactly the name of the module.</p>\n<p>When importing our module, python will pass in an empty module object, expecting it to be populated with our functions (and classes, presumably, if we had any). I dimly recall from my experience with C extensions for Python that this involves <em>a lot</em> of boilerplate code. Luckily, the <code>wrap_pyfuncion</code> macro takes care of all that!</p>\n<h2 id=\"making-it-all-work\" tabindex=\"-1\">Making it all work <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h2>\n<p>Now I just call <code>cargo build --release</code> to get the library compiled, and then, for simple development and testing, where I'm not worried about packaging, I can just make a symlink to the library file, renaming it in the process, and import it from python:</p>\n<pre class=\"language-rust\" tabindex=\"0\"><code class=\"language-rust\">ln <span class=\"token operator\">-</span>s target<span class=\"token operator\">/</span>release<span class=\"token operator\">/</span>librust_module<span class=\"token punctuation\">.</span>dylib rust_module<span class=\"token punctuation\">.</span>so</code></pre>\n<p>And now, in the directory that has this module, I can run the following Python code successfully:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rust_module <span class=\"token keyword\">import</span> rust_function\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n\nanswer <span class=\"token operator\">=</span> rust_function<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> answer <span class=\"token operator\">==</span> <span class=\"token number\">55</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Success! </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\"> + 13 == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>answer<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"next-steps-and-closing-thoughts\" tabindex=\"-1\">Next steps and closing thoughts <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-06-15-rust-python-1/\">#</a></h1>\n<p>Well, this was as simple as it gets for an initial step. What are some things we should explore?</p>\n<ul>\n<li>Move beyond primitive types. Can we take in, and return, dictionaries?</li>\n<li>What about errors? If I get a Rust error somewhere, how do I turn that into a python exception?</li>\n<li>Python functions have both positional and keyword arguments. How do those get mapped in a Rust function call?</li>\n<li>Manually copying and renaming the library file works for testing, but there must be a better way. (And apparently there is, via the <code>maturin</code> crate / Rust package).</li>\n<li>And what about classes?</li>\n</ul>\n",
			"date_published": "2021-06-15T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/",
			"url": "https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 9",
			"content_html": "<p>This is the ninth part in my review and reading notes on the Practical Object Oriented Programming book (<a href=\"http://www.poodr.com\">www.poodr.com</a>) by Sandi Metz.</p>\n<p>I think in this chapter, due to important differences between Python on Ruby, I will deviate the most in following along with the author.</p>\n<p>The chapter begins with a great review of the three pillars of good, well-designed, changeable code.</p>\n<p>You must:</p>\n<ul>\n<li>Understand object-oriented design, so your code is capable of accommodating future change.</li>\n<li>Be skilled a <em>refactoring</em>, so you can successfully carry out those future changes.</li>\n<li>Write <strong>high-value</strong> tests, so that you can refactor constantly without fear.</li>\n</ul>\n<h1 id=\"intentional-testing\" tabindex=\"-1\">Intentional Testing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>A quick recap on why we test. The reasons range from the concrete to the subtle:</p>\n<ul>\n<li>Of course we test to reduce bugs.</li>\n<li>But also to provide documentation: This is how you use this class and what its contract is.</li>\n<li>Writing tests first to <em>improve</em> design. A test is just another piece of code that collaborates with your class!</li>\n</ul>\n<p>This all comes down to one overarching goal: Reduce cost! If it was easier and cheaper to just wait for bugs to show up and then find their true source and fix them, then writing unit tests would be a waste of time (and money).</p>\n<p>Invest time in good tests and hopefully get that time back via easier refactoring, better design, fewer bugs.</p>\n<p>Here then is a dilemma of the testing novice: Writing tests costs more time than it saves, until you get good ad writing tests! This is a bit like teaching someone to type with all their fingers when, all their life, they've been a happy two-finger-seek-and-peck typer. Some people get quite fast at two-finger typing. Changing to using more fingers will initially feel awkward to them, and will in fact slow them down.</p>\n<p>So here the author follows with a great discussion of what, when, how to test.</p>\n<h2 id=\"knowing-your-intentions\" tabindex=\"-1\">Knowing your intentions <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Benefits of testing:</p>\n<h3 id=\"finding-bugs\" tabindex=\"-1\">Finding Bugs <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>Obviously the earlier the better!</p>\n<h3 id=\"supplying-documentation\" tabindex=\"-1\">Supplying Documentation <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>Tests are a reliable documentation of design! Comments and API documentation can easily become obsolete. Tests (that are run and pass, of course) must stay true to the design!</p>\n<p>Having worked on a few larger projects myself by now, I cannot overstate how true this is. So many times I have looked at the docstring of a method or class only to discover that it is woefully out of date, referring to parameters that are not being passed in anymore, and omitting those that are.</p>\n<p>Instead, a proper test cannot lie: If you change the way a method is called, the test of that method must change with it!</p>\n<h3 id=\"deferring-design-decisions\" tabindex=\"-1\">Deferring Design Decisions <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>As explained earlier in the book, you should not make premature &quot;just in case&quot; design decisions. One example was: Don't create some class inheritance hierarchy with an abstract base class until you have <em>at least three</em> concrete examples for their subclasses! If you start off your design with just one concrete class, just leave it concrete. Don't be a premature taxonomist. But: Write a proper test for the interface of your concrete class, so that, when the time comes, refactoring to a class hierarchy will not break the behavior of the concrete class.</p>\n<p>Basically, deferring a design decisions means acknowledging that the current design is probably not the best final design, but that more information is required to pick the <em>correct</em> final (well, final until even more new information comes, anyway) design. With that in mind, you are then fully aware that there's a good chance you'll want to <em>refactor</em> your code in the near future. And with <em>that</em> in mind, you'll of course want the right type of test in place that will allow you to refactor without thinking about &quot;what if my refactoring accidentally breaks what already worked?&quot;</p>\n<h3 id=\"supporting-abstractions\" tabindex=\"-1\">Supporting Abstractions <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>A quote from the author:</p>\n<blockquote>\n<p>Good design naturally progresses toward small independent objects that rely on abstractions.</p>\n</blockquote>\n<p>The individual abstract classes might then be easy to understand, but <em>how they're supposed to all fit together</em> might not be immediately obvious. Tests can help with that, and ensure that classes that play certain roles do so correctly.</p>\n<h3 id=\"exposing-design-flaws\" tabindex=\"-1\">Exposing Design Flaws <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>As said above, a test is just another piece of code that wants to use your classes and collaborate with them. That means: If your design is bad, testing will be hard! A number of concrete examples of this:</p>\n<ul>\n<li>If setup is annoying and painful, your objects require too much context.</li>\n<li>If you cannot effectively test one object in isolation but rather have to pull in a bunch of other objects into the test, your code has too many dependencies.</li>\n<li>If the test is hard to write, the object under test might be hard to reuse.</li>\n</ul>\n<p>So much for the <em>reasons</em> to test. Next up is a great discussion of <em>what</em> you should be testing.</p>\n<h3 id=\"knowing-what-to-test\" tabindex=\"-1\">Knowing what to test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>A reminder to what our goal is: We want to get all the benefits from testing at the lowest cost possible! How?</p>\n<blockquote>\n<p>Write <em>loosely coupled tests</em> about <em>only what matters</em>.</p>\n</blockquote>\n<p>It is important that tests are <em>loosely coupled</em>, because otherwise they become hard and expensive to maintain. There's also the concept of <em>brittle</em> tests: Tests that start failing and need to be changed for <em>bad</em> reasons; reasons that the <em>rest</em> of your application doesn't even care about.</p>\n<p>A few rules follow:</p>\n<ul>\n<li>Test <em>everything</em>, but <em>just once</em>, and <em>in the right place</em>.</li>\n<li>See objects as purely defined by the <em>messages</em> going into and coming out of them. Treat the rest of the class as a black box (ideally, at least; there are some justifiable exceptions).</li>\n<li>See a test as just another piece of code that wants to collaborate with your class!</li>\n<li>Apply the same general design principles that apply to application code to the test code!</li>\n<li>Tests should concentrate on incoming and outgoing messages.</li>\n</ul>\n<p>That last part deserves some elaboration. The <em>incoming</em> messages are what forms the class's public interface. Some instigating object sends the messages and gets some answer in return. It is our job to test that the message returns the right thing, or otherwise has the right <em>effect</em>. The author calls these tests &quot;tests of <em>state</em>&quot;.</p>\n<p>This is also a great opportunity to talk about command/query separation. In the spirit of clean code and having one method do exactly one thing, it is considered good style to have a method <em>either</em> compute and return something or <em>do</em> something (e.g. set some field to something or kick off any other sort of side-effect). So then for a query, we check that the return value is correct, and for a command we will have to figure out how to check the desired side-effect.</p>\n<p>If you follow these rules, your tests will have the <em>smallest possible coupling</em> to the classes they are testing. These tests will have to change for only two reasons:</p>\n<ul>\n<li>Changes to the public interface of the class.</li>\n<li>Changes to the expected behavior of the class.<br>\nThose are <em>good</em> reasons to change. In the first case, obviously we have to change a test if we, say, rename a method. In the second case, we again have a good reason to change the test: The current version of the test checks for the correct current behavior of the class. If we want to <em>change</em> that behavior, the tests need to be changed to check that.</li>\n</ul>\n<h3 id=\"knowing-when-to-test\" tabindex=\"-1\">Knowing when to test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<blockquote>\n<p>You should write tests first, whenever it makes sense to do so.</p>\n</blockquote>\n<p>Nice quote from the author. There is a whole school of thought around TDD (Test-Driven Design) that emphasizes that a test should be written <em>before</em> the code it's meant to test. This does not always make sense, according to the author, and in my own experience I tend to agree. I would argue that tests are great for exploring and guiding towards good design, but are <em>not</em> meant as a tool for algorithm development: If you don't even know <em>what</em> you're trying to implement, tests won't necessarily get you there. If you disagree, I challenge you to use pure TDD to write a fast solver for an NP-hard problem of your choice.</p>\n<p>Another issue is that, when writing tests first, you already need to have good design sense to write the type of test that will then lead to good design. As the author puts it:</p>\n<ul>\n<li>Novices often write the most complex, coupled code</li>\n<li>That makes tests super-hard to write retroactively!</li>\n<li>So then if the novice forces themselves to write the test first and <em>persevere</em>, at least the code will be <em>somewhat</em> reusable.</li>\n<li>It doesn't save you from bad design, though! It is perfectly possible to use TDD and still arrive at strongly coupled code!</li>\n</ul>\n<p>Persevere! When it comes to design, <em>write tests first</em>, but do so <em>while applying the principles of good design</em>.</p>\n<p>And if you are not writing tests as the <em>very</em> first thing, still treat them with more respect than a mere afterthought!</p>\n<h3 id=\"knowing-how-to-test\" tabindex=\"-1\">Knowing how to test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>We discuseed what and when to test, so now comes a quick overview on <em>how</em> to test. First some logistics:</p>\n<p>First, pick a mainstream framework that suits your needs (for Python, I <em>really</em> enjoy pytest). Just pick something reasonably stable and well-maintained.</p>\n<p>Next, consider which style of testing to use. There are two <em>extremes</em>: You can test outside-in and inside-out. With inside-out, you would first write tests for, and then implement, the low-level building blocks of your application, and then once those are in place, piece by piece, assemble them into the larger application.</p>\n<p>With outside-in, you would first write tests for the high-level abstract concepts, specifying the general behavior you want to see from them and mocking or stubbing out the rest, and then slowly work your way down to the lower level objects.</p>\n<p>In <a href=\"https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/\">&quot;The Pragmatic Programmer&quot;</a> the authors give a different view. They assert that both of the extreme approaches have flaws. With inside-out, you can spend a lot of time creating neat little classes that you <em>think</em> will be the right sort of building blocks, only to discover much later that they don't quite fit the purpose. With outside-in, you assume that you can identify the correct abstractions and high-level concepts right away, and there is a very real danger that you engage in some <em>premature abstraction</em>. The authors suggest, rather, to pick very small slices of functionality and develop them <em>end-to-end</em>. This has two effects: The choice of whether to go inside-out or outside-in matters much less, because much fewer moving pieces are involved. And feedback about what the right low-level components and the right high-level abstractions are arrives much sooner.</p>\n<p>Next, some terminology. We'll be talking about the <em>object under test</em> versus <em>everything else</em>. In testing, we aim that our tests are as ignorant as possible about the <em>everything else</em> part. The less a <code>test_class_A</code> needs about classes B through Z, the better!</p>\n<p>And, finally, the tests should be as loosely coupled to the object under test as possible, which, as mentioned above, means ideally they should <em>only</em> depend on the public interface of the object under test, and <em>not</em> its internal fields and private methods!</p>\n<p>Now it might be that for some complex algorithmic problems you do want to check some intermediate results that are stored in private fields. Just remember that, in any case, we want our tests coupled to <em>stable</em> things rather than less stable things!</p>\n<h1 id=\"testing-incoming-messages\" tabindex=\"-1\">Testing incoming messages <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>The object under test has a public interface. These are the <em>incoming messages</em>, and of course we need to test that they &quot;do the right thing&quot;.</p>\n<p>Assuming that the object under test already exists and you're adding tests after the fact, the first thing to check is whether anyone else actually ever calls a given method. If not, just go ahead and delete it.</p>\n<h2 id=\"getters-and-setters\" tabindex=\"-1\">Getters and Setters <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Next, don't bother writing sets for <em>simple</em> getters and setters. First of all, if they really are just very basic getters/setters then at least in Python you should just remove them and make the corresponding attribute public. And at that point, we don't need a test that <code>my_class.foo = 42</code> actually assigns 42 to <code>foo</code>.</p>\n<p>If, however, you have introduced more complicated logic via the <code>@property</code> decorator, you should of course test that it behaves correctly. A small, silly example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n        \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_diameter <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n    \n    <span class=\"token decorator annotation punctuation\">@radius<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_diameter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> value</code></pre>\n<p>This is of course still pretty simple logic. Just pretend that it was actually complicated, okay? Now a <em>brittle</em> test, that would be <em>strongly coupled</em>, would try and make some assertions about <code>_diameter</code>. But remember: Rely on the public interface only if at all possible. The test itself is actually quite simple, but we need it because the internal behavior is complex:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_circle_sets_radius_correctly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    circle <span class=\"token operator\">=</span> Circle<span class=\"token punctuation\">(</span>radius <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">assert</span> circle<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n    \n    circle<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> <span class=\"token number\">42.5</span>\n    <span class=\"token keyword\">assert</span> circle<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">==</span> <span class=\"token number\">42.5</span></code></pre>\n<p>And who knows, we might even get a failing test due to floating point inaccuracies...</p>\n<h2 id=\"testing-simple-methods\" tabindex=\"-1\">Testing simple methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Next in line are simple methods that return a result but have no further dependencies to get their job done. That is, the only object involved in handling the incoming message is the object under test. In that case, just consider what the expectation of that method is and write the appropriate tests. Don't forget edge cases! Consider parametrizing your tests to check multiple inputs, or, going even further, use a hypothesis-testing module (<code>hypothesis</code> works really well with pytest) to automatically have a bunch of possible inputs tested.</p>\n<p>And don't forget to test that exceptions get raised as they should. To keep the cost of testing reasonable, I would not suggest testing that any sort of intentional garbage input leads to errors: Yes, a function that clearly needs to operate on numbers will raise all sorts of <code>TypeError</code> exceptions if you put something else in. This is already handled by the programming language itself.</p>\n<p>Instead, we should test those exceptions that our object under test explicitly raises to signal certain out-of-the-ordinary circumstances!</p>\n<h2 id=\"testing-more-complicated-methods\" tabindex=\"-1\">Testing more complicated methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>&quot;More complicated&quot; here means that the method under test in turn sends messages to other objects to achieve a desired end result. Why does that make it more complicated? If we recall the advice about treating the object under test as a black box and only relying on its public interface, we should be able to test if the method under test returns the correct result, whether that method relies on other objects.</p>\n<p>However, this sort of test might violate the <em>test everything only once</em> idea: If a method of object <code>A</code> relies on object <code>B</code>, then testing that method indirectly also tests object <code>B</code>, which means we have duplicated the effort. Ideally we would want to separate those tests such that in the tests for <code>A</code> we make sure that the part that <code>A</code> is responsible for is handled correctly, without including a check on <code>B</code>.</p>\n<p>Such coupled tests might be slow to run (if creating instances of <code>B</code> or running its methods is costly) and might break in unexpected ways due to the coupling.</p>\n<p>The next section discusses ways to achieve better isolation:</p>\n<h2 id=\"isolating-the-object-under-test\" tabindex=\"-1\">Isolating the object under test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>If we truly want to test everything only once, we must design objects such that we can <em>isolate</em> them when under test!</p>\n<p>Recall our simple job helper example</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">do_some_work</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        intermediate_result <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_process_further<span class=\"token punctuation\">(</span>intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>In this case, testing <code>do_some_work</code> inevitably pulls in object <code>B</code> into the mix, violating our goal of testing everything only once. What if <code>B().process(arg)</code> takes a really long time?</p>\n<p>As we already discussed (in the notes to chapter 3), we have here a case where class <code>A</code> depends on class <code>B</code> when really it should depend on <em>some</em> object playing the <em>role</em> of a processor. We'd refactor this code to use dependency injection:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> job_helper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_job_helper <span class=\"token operator\">=</span> job_helper\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">do_some_work</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        intermediate_result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_process_further<span class=\"token punctuation\">(</span>intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>For now, with this refactoring, the test would then inject an instance of <code>B</code>:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_do_some_work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span>job_helper <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>do_some_work<span class=\"token punctuation\">(</span>arg<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">==</span> <span class=\"token string\">\"whatever we expected\"</span></code></pre>\n<p>So right now we have reduced the coupling of class <code>A</code> to explicit class names, but we haven't quite yet solved the problem of the test of <code>A</code> also relying on class <code>B</code>.</p>\n<p>Sandi Metz reminds us here that the injected class plays a <em>role</em>. There could just as well be <em>other</em> objects playing that role. Why should <code>B</code> get to play the role of <code>job_helper</code> and not some other class that implements <code>process(arg)</code>? What if we have <em>lots</em> of classes that could play this role? Or what if creating those classes or running their methods was extremely costly, or had some annoying side-effects (like having to talk to some external web-server or writing a big file to disk?). Read on to find out.</p>\n<h2 id=\"injecting-dependencies-as-roles\" tabindex=\"-1\">Injecting dependencies as roles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>First: Before overthinking, over-engineering and over-abstracting things, consider whether creating and injecting the concrete class (in our case class <code>B</code>) is okay after all. If it is fast and cost-effective and mirrors how it should be done in the actual application, then this is fine! For example, that class might be a lightweight utility class that groups a few useful things together; creating it and running it is fast, and it's the <em>only</em> class playing the <code>job_helper</code> role in your application.</p>\n<p>However, if that's not the case, here are some advanced techniques for isolation:</p>\n<h3 id=\"creating-test-doubles\" tabindex=\"-1\">Creating test doubles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<ul>\n<li>Let's assume the concrete classes we'd use for dependency injection are costly to create, or costly to run, or there's so many of them that it's not clear which one we should use.</li>\n<li>In that case, you can create <em>yet another class</em> that plays the appropriate role, but with a very simple (&quot;stub&quot;) implementation. Call these <code>Dummy</code> or <code>Double</code>.<br>\nIn our example, this could look like this:</li>\n</ul>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JobHelperDummy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">11</span> <span class=\"token comment\"># stub result; super-fast to execute and always reliable</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_do_some_work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span>job_helper<span class=\"token operator\">=</span>JobHelperDummy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>do_some_work<span class=\"token punctuation\">(</span>arg<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"whatever the result would be if the intermediate result was 11\"</span></code></pre>\n<p>Of course we can add a bit more sophistication into this example; maybe the dummy-result that we've hard-coded to 11 could be a parameter that we get to pass into the class.</p>\n<p>One note: Some people would call <code>JobHelperDummy</code> a mock object. This is not accurate. We'll discuss mocks in a coming chapter. The reason for this occasional confusion is that tools used for creating mocks are also quite useful in creating doubles. Though as we have shown here, you can always just create a test double (or dummy) by hand.</p>\n<p>Is now all good and well? Not quite! The author points out an important pitfall. Let's say we decide to refactor class <code>B</code> and rename the <code>process</code> method to something else, like <code>super_awesome_process</code>. But let's say we forget to update class <code>A</code>, and have it still try to call <code>job_helper.process</code>. That means our <em>application</em> is broken. What about our tests? They still pass! <code>A</code> tries to call <code>process</code>, and the <code>JobHelperDummy</code> that we pas into <code>A</code> dutifully implements <code>process</code>, so in test-world, all is fine!</p>\n<p>The lesson here is: If a concrete object should play a given role (i.e. implement a given duck type), there should be tests that break if the object doesn't properly play the role! That includes test doubles! More on <em>how</em> to do that later in the chapter.</p>\n<h1 id=\"testing-private-methods\" tabindex=\"-1\">Testing private methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>Another great example of being practical: In an idealized world, you'd never test private methods, because they'll never be called from the outside. They would be <em>indirectly</em> tested by the tests of those public methods that in turn invoke the private method. But we're not always in this ideal world. Let's see what our options are.</p>\n<h2 id=\"ignoring-private-methods-during-testing\" tabindex=\"-1\">Ignoring private methods during testing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Private methods are used as helpers and internal implementation details of the public methods. Thus, tests of the public methods will already be testing the private methods indirectly. Explicitly testing a private method might thus lead to unstable tests, because these private methods can change around more than the public interface.</p>\n<p>Another caveat: If you expose these private methods in your tests and basically show their &quot;example usage&quot;, others might be tempted to use them as well.</p>\n<h2 id=\"removing-private-methods-from-the-object-under-test\" tabindex=\"-1\">Removing private methods from the object under test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Now here is an easy way out: If your object has <em>no</em> private methods, you don't need to fret over whether or not to test them... In any case, if your object has <em>too many</em> private methods, maybe that object is doing too much! Could / should it be broken up into several smaller classes? And these smaller service classes would then have public methods instead of private methods.</p>\n<p>That however only makes sense if those new classes with their newly public methods will actually have a <em>stable</em> interface. As the author points out, a method doesn't suddenly become more stable just because you made it public instead of private.</p>\n<p>Another thought is that this aversion to private methods might run counter to the clean code design principle of writing small functions. The public method would be the class's entry point to achieve a desired behavior and in turn achieve that by calling appropriate lower level private methods.</p>\n<h2 id=\"choosing-to-test-a-private-method\" tabindex=\"-1\">Choosing to test a private method <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>So when is it ever okay to <em>actually</em> test a private method? The author gives one example, and I'd like to give another.</p>\n<p>The author discusses testing private methods in the context of <em>starting</em> with some complicated tangled mess that is the result of a lack of information: We don't know yet what the good design will look like. A good idea then is to <em>hide</em> that mess in private methods and add <em>tests</em> to them so that we can then refactor with confidence toward a better design.</p>\n<p>Another example where I believe testing a private method is justified concerns a <em>stable</em> sub-routine of some complex algorithm where it wouldn't make sense to publicly expose that sub-routine yet we still want a sufficiently fine-grained (i.e. beyond the public interface of the overall algorithm) test to make sure all the individual pieces of the algorithm work as intended. It might also be that certain edge cases that we want to test are hard to bring about via the input to the public method.</p>\n<h1 id=\"testing-outgoing-messages\" tabindex=\"-1\">Testing outgoing messages <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>In a well-designed application, an outgoing message should be <em>either</em> a query <em>or</em> a command. A query is a method that returns some result without any side-effects. A command is a method that does not return anything but kicks of certain side-effects.</p>\n<p>That means the object under test will send outgoing messages either to receive some information or to tell someone else in the system to do something.</p>\n<p>The important thing to note is: A query matters only to the sender. Because the query has no side-effects, whether or not it was called has no effect on the system. A command, on the other hand, might have an effect that matters to the rest of the system.</p>\n<p>So what do we test here, and how?</p>\n<h2 id=\"ignore-outgoing-queries\" tabindex=\"-1\">Ignore outgoing queries <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Consider this example again:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> job_helper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>job_helper <span class=\"token operator\">=</span> job_helper\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">process_input</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        intermediate_result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>do_some_more_processing<span class=\"token punctuation\">(</span>intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>In this case, <code>process</code> is an <em>outgoing</em> message, sent by class <code>A</code> to some other class. On top of that, it is a <em>query</em>. We're asking the job helper to give us the answer to some input question, and then internally use that intermediate result. In this case, the test suite for class <code>A</code> should not do anything at all about the outgoing <code>process</code> message.</p>\n<p>Instead, the test suite for whichever class plays the <code>job_helper</code> role will be testing that <code>process</code> behaves as intended, because for <em>that</em> class it will be an <em>incoming</em> message.</p>\n<h2 id=\"proving-command-messages\" tabindex=\"-1\">Proving command messages <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>If it matters <em>to the rest of the application</em> that your object <em>sends</em> a specific method, then this expectation on the behavior needs to be tested as well.</p>\n<p>The emphasis, here, is on <em>rest of the application</em>. If the command is merely sent to some internal auxiliary class in a way that is hidden from the rest of the application, that whole block of interactions can be treated as just one big query: Maybe in our example above the <code>job_helper</code> needs a bit of extra setup before we can ask it to process our data. This might be done via commands that change the internal state of the job helper, but we assume that the rest of the application does not care about that. We would just treat that whole block of messages as one big query (albeit with side-effects.)</p>\n<p>The book example does a great job here with the observer pattern. The object under test now has a <em>responsibility</em> to send out a specific method to a specific target, and we need a test that proves that. The solution here are <em>mocks</em>. These are <em>special</em> test double objects that record what messages they have received, and with what arguments, and then allow us to make assertions about that. In Python, you can find them in the <code>unittest.mock</code> module.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> Mock\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_that_do_something_calls_job_helper_process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    job_helper <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    object_under_test <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span>job_helper<span class=\"token operator\">=</span>job_helper<span class=\"token punctuation\">)</span>\n\n    object_under_test<span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span>assert_called_with<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></code></pre>\n<p>For this technique to work <em>smoothly</em>, it is important that your application is well-designed, making proper use of dependency injection. In the above example, if <code>job_helper</code> was some explicit instance of some class <code>B</code>, and wasn't injected from the outside into class <code>A</code>, we would have to <em>monkey patch</em> the <code>job_helper</code> instance inside class <code>A</code>. This <em>couples</em> or test to the internal structure of the class, and this is what sometimes gives mocking a reputation for leading to <em>brittle</em> tests.</p>\n<h1 id=\"testing-duck-types\" tabindex=\"-1\">Testing Duck Types <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<ul>\n<li>Consider a duck type that's defined solely by its interface</li>\n<li>It would make sense to include a <em>test</em> for every class that plays the role of that duck type to make sure it <em>honors</em> that interface</li>\n<li>We <em>can</em> of course achieve that by having them all inherit from the same abstract base class, but let's say we want to keep the duck type simple</li>\n<li>Then we basically need to test that all these classes <em>respond</em> to the messages that the ducktype responds to</li>\n<li>Ideally we achieve that <em>without</em> duplicating this code all the time.</li>\n</ul>\n<p>For Ruby, the author gives the example of doing that with modules. Here is how the analogue could work in python:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">55</span></code></pre>\n<p>Let's say <code>foo</code> is a message that belongs to some duck type <code>Fooable</code>. We can then write<br>\nthe following mixin class:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FooableDuckTypeTestMixin</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>object_under_test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_implements_foo_ducktype</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>And then in the test file (using pytest) we would have:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> class_a <span class=\"token keyword\">import</span> A\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClassA</span><span class=\"token punctuation\">(</span>FooDuckTypeTestMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    object_under_test <span class=\"token operator\">=</span> A\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">55</span></code></pre>\n<p>Things will look differently if you use a different test suite (e.g. <code>nose</code> or just plain old <code>unittest</code>). In pytest, the test class is merely for grouping functions and does <em>not</em> take care of test setup. Instead of setup methods, pytest allows methods or functions be declared as fixtures. Here we turn <code>instance</code> into a fixture with class-wide scope. Then every function inside that class with an argument named <code>instance</code> will automatically receive, via pytest, whatever the <code>def instance(self)</code> method returns. In this case, it's an instance of the class under test.</p>\n<p>If we now add another class <code>B</code> that <em>also</em> implements the <code>Foo</code> ducktype, we also just add the duck-type test mixin to its test class, this time of course setting <code>object_under_test = B</code>.</p>\n<h2 id=\"using-role-tests-to-validate-doubles\" tabindex=\"-1\">Using role tests to validate doubles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h2>\n<p>Earlier in the chapter it was discussed that using test doubles might lead to <em>brittle</em> tests when the test double plays the role of a duck type and then the duck type changes. In this case, the application would break without the tests catching that!</p>\n<p>The solution presented by the author here is to then just use the test module / mixin for the test double as well!</p>\n<h3 id=\"side-note-python\" tabindex=\"-1\">Side note: Python <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h3>\n<p>In Python, since we have the option to use multiple inheritance, we <em>could</em> solve this problem (of objects not playing their roles correctly) by using abstract base classes (ABCs). Those would then <em>automatically</em> ensure that their subclasses implement the<br>\ncorrect interface.</p>\n<p>However, this can lead to a lot of noise and boilerplate code. Remember from the duck type chapter that Python has a number of <em>protocols</em>, like the sequence protocol, that means anything that implements <code>__len__</code> and <code>__getitem__</code> is considered a sequence (provided <code>__getitem__</code> works with integers from 0 to <code>len - 1</code>).</p>\n<p>Python has a cool feature though: You can override the standard way that a class checks if another class is a subclass of it. Here is how that would look like for our foo-example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span> abstractmethod\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FooDuckType</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Some docstring explaining what foo should do in subclasses\"\"\"</span>\n        \n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__subclasshook__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> subclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls <span class=\"token keyword\">is</span> FooDuckType<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> NotImplemented</code></pre>\n<p>What this achieves is that <code>isinstance(some_class, FooDuckType)</code> doesn't check if<br>\n<code>some_class</code> <em>explicitly</em> inherits from <code>FooDuckType</code>. Instead, it runs the checks<br>\nin <code>__subclasshook__</code>. What this means in our case is that any class that implements <code>foo</code> will be considered a subclass of <code>FooDuckType</code>.</p>\n<p>You have to carefully evaluate whether all this extra code and type checking is necessary and helpful. We are, after all, writing in a dynamic language! To quote Sandi Metz:</p>\n<blockquote>\n<p>Having to write your own role tests is the price you pay for the benefits of dynamic typing. In statically typed languages you can lean on the complier to enforce the interfaces of roles, but in dynamically typed languages, roles are virtual. If you fear that human communication will be insufficient to keep all players of a role in sync, write these tests.</p>\n</blockquote>\n<p>So it is a judgement call. For simple duck types, this might indeed by overkill! And for more complex types, using the abstract base class mechanism instead might be the way to go!</p>\n<h1 id=\"testing-inherited-code\" tabindex=\"-1\">Testing inherited code <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>I believe this chapter does not quite apply as much to Python as it would to Ruby. The author describes in this chapter that, with an inheritance hierarchy, we should include a number of tests and share them via the module mechanics:</p>\n<ul>\n<li>Write a module to be included in each subclass's tests that ensures that the subclasses honor the interface of the superclass</li>\n<li>Write a module to be included in each subclass's tests that ensures that the subclasses &quot;respond&quot; to the hook methods that they're required to implement.</li>\n</ul>\n<p>I feel that these tests are not needed in Python. By inheriting from a superclass, we get the automatic delegation and thus of course our subclasses respond to all the messages of the superclass, unless we dome some <em>really</em> weird meta-programming. In addition, python has the <code>@abstractmethod</code> decorator that forces subclasses to provide implementations for methods decorated with it.</p>\n<p>What I am wondering: If we omit these explicit interface tests, what is the worst that could happen? Does it hinder future attempts at refactoring? Would it lead to unexpected breakages in our code? I do not think so!</p>\n<p>So what <em>do</em> we test, and how, in inheritance? It all comes down to the incoming and outgoing messages again!</p>\n<p>For the subclasses, remember that they are meant to provide <em>specializations</em>. The hook methods represent incoming messages and as such deserve to be tested to make sure they deliver the _correct _specialization.</p>\n<p>For the superclass abstractions, we want to make sure that the hook methods get appropriately incorporated into the superclass's behavior. We achieve that by using a test double again: A simple dummy class inherits from the abstract superclass and fills in the missing pieces with simple-to-test stub methods.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>Hopefully this writeup made it clear <em>what</em>, <em>when</em>, and <em>how</em> we should test. Such tests are invaluable for an application and become more important the more abstract concepts there are in your code. Without such tests, the application will be too hard to change and understand!</p>\n<h1 id=\"overall-summary\" tabindex=\"-1\">Overall Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-22-poodr-chapter9/\">#</a></h1>\n<p>This post concludes the review and book notes. I can highly recommend grabbing a copy of the book for anyone programming in a dynamically typed language, be it Ruby, Python, or something else entirely. The concepts and ideas will apply, with minor modifications, across the board.</p>\n",
			"date_published": "2021-01-22T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/",
			"url": "https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 8",
			"content_html": "<p>This is the eigth part in my review and reading notes on the Practical Object Oriented Programming book (<a href=\"http://www.poodr.com\">www.poodr.com</a>) by Sandi Metz.</p>\n<p>Composition is the concept of combining parts into something larger, and after inheritance and modules it is the third technique for arranging behavior and code for effective reuse.</p>\n<p>In this chapter, the author first gives as an example a big refactoring of something that was previously using inheritance into something that now uses composition.</p>\n<p>The basic idea is: A complex object may have <em>parts</em>. Being a <em>part</em> is a <em>role</em> and the containing object should be happy to interact and collaborate with any object that implements the appropriate interface!</p>\n<p>I will only very superficially touch on the example. Check it out in the original book.</p>\n<h1 id=\"composing-a-bicycle-of-parts\" tabindex=\"-1\">Composing a Bicycle of Parts <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h1>\n<ul>\n<li>Flashback to two chapters ago (Inheritance).</li>\n<li>Recall <code>MountainBike</code> and <code>RoadBike</code> being subclasses of <code>Bike</code>.</li>\n<li>What do they <em>differ</em> in? Their spare parts!</li>\n<li>So what if we just have one <em>concrete</em> class, <code>Bike</code> that <em>has</em> parts? Then the <em>parts</em> can be specific to road bikes and mountain bikes: A road bike is a bike with road bike parts, and a mountain bike is a bike with mountain bike parts!</li>\n</ul>\n<h2 id=\"updating-the-bicycle-class\" tabindex=\"-1\">Updating the Bicycle Class <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<ul>\n<li>Here we refactor the Bicycle inheritance hierarchy and replace it with composition.</li>\n<li>Basically this is all just about delegating messages!</li>\n<li>Bicycle needs to respond to <code>spares</code> message and therefore <code>delegates</code> it to its <code>parts</code> object.</li>\n<li>Contrast with inheritance: There, a <code>MountainBike</code> needed to respond to <code>spares</code> message and therefore <em>delegated</em> it to the <code>Biycle</code> superclass.</li>\n<li>Note: <code>Bicycle</code> class now does <em>very little</em> indeed. This is just an example. In larger example it would do <em>other</em> things; we just moved the things related to spare parts into the <code>parts</code> class!</li>\n</ul>\n<p>Main takeaway: Inheritance leads to <em>automatic</em> delegation. Composition requires <em>explicit</em> delegation.</p>\n<h2 id=\"creating-a-parts-hierarchy\" tabindex=\"-1\">Creating a Parts hierarchy <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<ul>\n<li><code>Bicycle</code> is a concrete class now; no sub-classes!</li>\n<li>Instead, subclass from <code>Parts</code>. <em>There</em> we will have that hierarchy.</li>\n<li>In this example, just copy over relevant code from our previous hierarchy.</li>\n</ul>\n<p>Common pattern: Using composition and inheritance side by side: An object is made up of parts, and those parts are placed in a hierarchy.</p>\n<h1 id=\"composing-the-parts-object\" tabindex=\"-1\">Composing the Parts object <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h1>\n<ul>\n<li>So far, <code>Parts</code> handled as class using inheritance.</li>\n<li>We can refactor to use composition:</li>\n<li>Obviously a <code>Parts</code> object could be composed of many <code>Part</code> objects.</li>\n</ul>\n<h2 id=\"creating-the-part-object\" tabindex=\"-1\">Creating the Part object <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<ul>\n<li>Simple class <code>Part</code> responds to <code>needs_spare</code></li>\n<li>Now <code>Parts</code> is just a simple wrapper around a <code>list</code> of <code>Part</code> objects</li>\n<li>It's debatable then whether a <code>Parts</code> class is necessary or if <code>Bicycle</code> could just hold a <code>list</code> of <code>Part</code> objects directly. It's <em>cleaner</em> conceptually to make a class so interaction and manipulation of the object is &quot;controlled&quot;, and implementation details such as underlying data structure (<code>list</code> versus something else) are encapsulated.</li>\n</ul>\n<h2 id=\"making-the-parts-object-more-like-an-array\" tabindex=\"-1\">Making the Parts Object More Like an Array <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<ul>\n<li>This part felt very Ruby specific; I think Python with its abstract collections base classes might not have the same issues.</li>\n<li><code>Parts</code> is a wrapper around a sequence of <code>Part</code> objects</li>\n<li>Programmers / Users <em>expect</em> certain behavior and features of a sequence, like being able to iterate over them: <code>for part in parts:</code></li>\n<li>In Python, that means implementing the iterator <em>protocol</em> (e.g. <code>__len__</code> and <code>__getitem__</code>).</li>\n<li>It's your call as the programmer how much work you want to put into making these protocols available.</li>\n</ul>\n<h1 id=\"manufacturing-parts\" tabindex=\"-1\">Manufacturing Parts <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h1>\n<p>This section does not necessarily have much to do with <em>composition</em> but shows a useful technique in object oriented programming: Somewhere in our code we need to create the objects that play certain roles. If the knowledge needed to create these objects is encapsulated in a class, we call that class a <em>Factory</em>. We can then ask this factory to make us certain objects that play certain roles without having to know the exact class name involved.</p>\n<h1 id=\"deciding-between-inheritance-and-composition\" tabindex=\"-1\">Deciding Between Inheritance and Composition <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h1>\n<p>Both classical inheritance and composition are ways of organizing and arranging code, and they come with their own costs and benefits. When you use inheritance, you get the benefit of <em>automated</em> message delegation, at the cost of placing your objects in a class hierarchy that you need to take care to get right. When you use composition, you have to deal with delegation manually, but the resulting coupling between the objects is much looser. Thus, which of the two techniques is right for your problem depends very much on the context. This section contains a few pointers and thoughts to get this right!</p>\n<ul>\n<li>General rule: When both would work, favor composition.</li>\n<li>If you cannot explicitly defend inheritance, don't use it.</li>\n<li>Inheritance is justified when there are high rewards for low risk.</li>\n</ul>\n<h2 id=\"accepting-the-consequences-of-inheritance\" tabindex=\"-1\">Accepting the Consequences of Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<h3 id=\"benefits\" tabindex=\"-1\">Benefits <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>In a well-modeled class hierarchy, your code will be reasonable, usable, and exemplary, but not necessarily transparent:</p>\n<ul>\n<li>Reasonable: Big changes in behavior can often be achieved with small changes at the top of the inheritance tree</li>\n<li>Usable: The code in a correct hierarchy can easily be reused by just adding yet another subclass extension to it.</li>\n<li>Exemplary: If the hierarchy is correct, then adding these new subclasses will be easy, and one can readily figure out what one must do by checking the code of existing subclasses.</li>\n</ul>\n<h3 id=\"costs-of-inheritance\" tabindex=\"-1\">Costs of Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>Note that these benefits only come to pass when you use inheritance for a problem that suits it. Otherwise, you experience the flip side of the benefits:</p>\n<ul>\n<li>Because changes at the top of the hierarchy have an outsized effect, the cost of changing things in an incorrectly modeled hierarchy is extremely large!</li>\n<li>An incorrectly modeled hierarchy is hard to re-use because the contract implied in inheriting from the hierarchy might be too restrictive.</li>\n<li>Finally, extending an incorrectly modeled hierarchy will often require ugly hacks that are <em>not</em> exemplary of good code.</li>\n</ul>\n<h3 id=\"python-vs-ruby\" tabindex=\"-1\">Python vs Ruby <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>Here is one quote from the book that does not necessarily apply to Python:</p>\n<blockquote>\n<p>Avoid writing frameworks that require users of your code to subclass your objects in order to gain your behavior. Their application’s objects may already be arranged in a hierarchy; inheriting from your framework may not be possible</p>\n</blockquote>\n<p>In Python, we have frameworks such as Django, or PyTorch, that make liberal use of inheritance, and those frameworks seem to be quite reasonable. In Python, we have of course the option to use multiple inheritance, so we can mix the framework hierarchy with our own hierarchy. Still, it is a good idea to first stop and consider whether inheritance is the <em>best</em> way to grant access to our framework's behavior, or whether composition might be better.</p>\n<h2 id=\"accepting-the-consequences-of-composition\" tabindex=\"-1\">Accepting the Consequences of Composition <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<p>As mentioned before, in composition we don't depend on any pre-defined class hierarchy, and therefore the composed objects deal with message delegation manually. The pros and cons are therefore different:</p>\n<h3 id=\"benefits-of-composition\" tabindex=\"-1\">Benefits of Composition <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>If done right, composition involves the creation of many small, independent objects with single responsibilities and well-defined public interfaces. Measured against the code qualities, such a system is:</p>\n<ul>\n<li>Transparent. Each class is small and has a single responsibility. The effect of changes to the object are easy to understand.</li>\n<li>Reasonable. Changing the behavior of the whole often means simply plugging in a different object for a given part. An example for this is that we can turn a <code>RoadBike</code> into a <code>MountainBike</code> simply by plugging in a <code>MountainBikeParts</code> object into the <code>Bicycle</code> class rather than a <code>RoadBikeParts</code> object.</li>\n<li>Useable. Because the objects are small and have well-defined interfaces, they are easy to re-use in new contexts.</li>\n</ul>\n<h3 id=\"costs-of-composition\" tabindex=\"-1\">Costs of Composition <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>Because we don't get the automatic message delegation that inheritance brings, a composed object must know explicitly which message to delegate to which other object. This might lead to a lot of repetition in the code. Also, if the composed object and its relation to its components is overly complicated, then even if each component is very small and easy to understand, the whole that they build might be very complex: Changing the behavior of one small component might have only a small effect on that component, but a huge effect on the behavior overall.</p>\n<p>So in this sense, composition is great at explaining how an object is made of parts, but not so good at dealing with lots of parts that are almost the same.</p>\n<h2 id=\"choosing-relationships\" tabindex=\"-1\">Choosing Relationships <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h2>\n<p>What follows are some rules and heuristics for picking either of classical inheritance, modules/mixins, and composition to deal with your problem. And of course it does not always have to be a binary either-or decision: You might use composition to model one relationship between an object and its parts, and then use classical inheritance among the parts that are almost identical.</p>\n<h3 id=\"use-inheritance-for-is-a-relationships\" tabindex=\"-1\">Use Inheritance for is-a Relationships <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>If the core of an object's identity is that it <em>is a</em> specialization of a general concept, inheritance might be the right choice. Especially if this modeling results in a shallow, narrow, hierarchy and thus your costs for being wrong are low.</p>\n<p>On the flip side, do <em>not</em> use inheritance just to get your hands at <em>some</em> of the behavior of some existing class. Just because a dog has four legs doesn't meant you should inherit from an existing class <code>Table</code> just to get support for legs...</p>\n<h3 id=\"use-duck-types-for-behaves-like-a-relationships\" tabindex=\"-1\">Use Duck-Types for behaves-like-a Relationships <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>When an object plays a role, but is not entirely defined by that role, we have a duck type. Examples include the <code>Schedulable</code> and <code>Preparer</code> duck-types of previous sections. It is common that many otherwise completely unrelated objects end up playing the same role in a given context. Placing these objects into a classical hierarchy would make little sense.</p>\n<p>Instead, identify the interface of the duck type and make sure the players of that duck type implement that interface. This can be done informally (at least in dynamic languages) or formally (e.g. by defining a purely abstract base class) depending on how much structure you need.</p>\n<p>If the duck type shares behavior, and not just the interface, use modules (in Ruby) or mixin classes (in Python).</p>\n<h3 id=\"use-composition-for-has-a-relationships\" tabindex=\"-1\">Use Composition for has-a Relationships <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h3>\n<p>Sometimes this is obvious: A car has wheels, a bicycle has a chain and other parts etc. The important thing is that a bike is <em>more</em> than its parts.</p>\n<p>There might be cases where this is not as obvious as it could be. Let's go back to an early example. Imagine for a moment that Python's <code>list</code> class did not already have methods for treating it as a stack (first-in-first-out data access) and we wanted to write our own <code>Stack</code> class, with just the two methods of <code>push</code> and <code>pop</code>.</p>\n<p>Someone might be tempted to use inheritance here:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> item\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre>\n<p>The issue here is that a <code>Stack</code> has some fundamental differences from a <code>list</code>. Most importantly, data access <em>only</em> happens at the top of the stack. But by inheriting the full interface and behavior from <code>list</code>, nothing would stop us from accessing items in the middle:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">my_stack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nmy_stack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nmy_stack<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_stack<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [5, 2]</span></code></pre>\n<p>We <em>could</em> try and prevent this by overriding the <code>__setitem__</code> and <code>__getitem__</code> methods in <code>Stack</code> to prevent this random access, but think about what that means in terms of the class hierarchy: <code>Stack</code> says &quot;I'm a list!&quot; but then says &quot;Yeah but don't access me like a list!&quot;. In other words, the <code>Stack</code> class is <em>not</em> substitutable for the <code>list</code> class!</p>\n<p>It would be much more accurate to say that a stack <em>has a</em> list (or whatever else we decide to use internally for storage):</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> item\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>vale<span class=\"token punctuation\">)</span></code></pre>\n<p>Now trying to set values via <code>my_stack[0] = 5</code> would give an error. And if we decide that we don't want to use a list to store the items but something else (a linked list, maybe?) we can make this change without changing the interface of <code>Stack</code>.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-13-poodr-chapter8/\">#</a></h1>\n<p>Classical inheritance, modules (or mixins) and composition are all great tools with justifiable use cases. They're all awesome when used in the right context, and they all have the potential to produce hard-to-maintain code when used in the wrong context. The last three chapters have hopefully demonstrated a number of principles that help deciding on which technique to use.</p>\n<p>And if you ever chose the wrong technique, don't hestitate to refactor to something more suitable!</p>\n",
			"date_published": "2021-01-13T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/",
			"url": "https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 7",
			"content_html": "<p>This is the seventh part in my review and reading notes on the Practical Object Oriented Programming book (<a href=\"http://www.poodr.com\">www.poodr.com</a>) by Sandi Metz.</p>\n<p>Now so far it was relatively easy to talk about Python even though the book is written from a Ruby perspective. This chapter is the first big deviation. Modules, in Ruby, are something altogether different from Python modules. They are most closely related to the idea of a <em>mixin</em> class: A collection of methods that you can add into an existing class. These modules are <em>a bit like</em> multiple inheritance, so let's start with a very brief detour on that.</p>\n<h1 id=\"multiple-inheritance\" tabindex=\"-1\">Multiple Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h1>\n<p>Lots can be written about multiple inheritance, but we try and keep it brief. Multiple inheritance is the concept of a given class having not one, but <em>several</em>, base classes. Some languages have it (C++, Python) and some don't (Java, Ruby). Those languages that made the conscious choice not to offer multiple inheritance do so because it comes with <em>lots</em> of potential for confusion.</p>\n<p>If we recall that inheritance is a form of <em>automated message delegation</em>, we can immediately see where such confusion comes from: If <code>A</code> inherits from both <code>B</code> and <code>C</code>, then to which class's method does <code>A</code> delegate, in what order? This is called the <em>method resolution order</em>, or MRO. In single-inheritance languages, this is easy to compute: You delegate first to your immediate super-class, then if the super-class doesn't implement that method either, you look further up along the chain. With multiple inheritance, though, instead of a chain we have a <em>graph</em>, with potentially multiple paths.</p>\n<h2 id=\"ruby-modules\" tabindex=\"-1\">Ruby Modules <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>So how are modules &quot;kind of&quot; like multiple inheritance? They allow your class to automatically delegate messages to these modules (which are <em>not</em> classes). And how is that different from <em>ordinary</em> multiple inheritance? Because of the clear distinction between modules and classes, it is always possible to <em>unambiguously</em> define the method resolution order, without confusion: When calling a method of an object, that object first checks its own methods. Then it checks, in the order of their inclusion, the modules it incorporates (and any modules that those modules in turn might incorporate). If that fails, it will move on to its superclass and check that class's methods, and the modules included by that class. There is never any &quot;branching&quot; that happens, and the famous &quot;diamond&quot; problem (A inherits from B and C, which in turn both inherit from D) cannot occur.</p>\n<h2 id=\"python-multiple-inheritance\" tabindex=\"-1\">Python Multiple Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>Python goes a different route. It allows multiple inheritance, and it uses a specific algorithm (called C3) to come up with a method resolution order. The full algorithm is quite complicated, <em>but</em> I would argue that creating an inheritance graph where the MRO is not immediately obvious should be considered a <em>code smell</em> anyway. The main thing to take away is that the order matters: <code>class A(B, C)</code> and <code>class A(C, B)</code> will behave differently. In the first case, the MRO is <code>A -&gt; B -&gt; C</code> whereas in the second case it is <code>A -&gt; C -&gt; B</code>.</p>\n<p>The author's goal in this chapter is to explain not just how inheritance works, but also if it makes sense to use it. More on that, too, in the next chapter.</p>\n<h1 id=\"understanding-roles\" tabindex=\"-1\">Understanding Roles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h1>\n<p>In the previous chapter, we saw how inheritance can be used to re-use code by moving the general concepts into an abstract superclass and then having concrete subclasses provide specializations as needed. This type of hierarchy <em>also</em> brings with it a strong semantic component: The subclasses form an <em>is-a</em> relationship with the superclass.</p>\n<p>Sometimes, though, you want to share behavior among otherwise unrelated objects, where there is no <em>is-a</em> relationship. We want to share behavior and re-use code without that semantic coupling that a subclass / superclass relationship involves. Let's follow along with the author.</p>\n<h2 id=\"finding-roles\" tabindex=\"-1\">Finding Roles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>Objects have a type, defined by what class they're an instance of. But objects also<br>\nplay <em>roles</em>, and a single object might, depending on the context, play many different roles. In the previous &quot;bike shop&quot; examples, a <code>Mechanic</code> might play the <em>role</em> of a trip preparer, but it might also play some other roles. So we see that the previously mentioned <em>duck types</em> are examples of roles: Many otherwise unrelated objects might play the same role if they all implement the same duck type.</p>\n<p>Now with many roles, it happens that there'll be a corresponding counter-part role: If there's a <code>Preparer</code> then there's (probably) also a <code>Preparable</code> role: If you recall, the <code>Mechanic</code> class needed to ask the trip for a list of bicycles. So a <code>Preparable</code> should have a method like <code>get_bicycles()</code>.</p>\n<p>The special thing about roles based on duck types is that they are defined <em>purely</em> by their interface. But it is easy to imagine that there are roles that are more complex and require specific <em>behavior</em>, not just a specific <em>public interface</em>. If there's shared behavior, we want to avoid just repeating it in the code. Think DRY (don't repeat yourself). So how do we organize this code that represents the shared behavior?</p>\n<ul>\n<li>In Ruby, <em>modules</em> are groups of methods that are independent of class and can be <em>mixed in</em> to another class.</li>\n<li>In Python, you'd use multiple inheritance, but with certain self-imposed restrictions to avoid creating a tangled mess of a class hierarchy: You would bundle the shared code in a class with <code>Mixin</code> in its name to signify that it's meant to be <em>mixed in</em>.</li>\n</ul>\n<p>The self-imposed restrictions on multiple inheritance in Python are modeled after the way Ruby modules work: Since a module isn't a class, you cannot <em>instantiate</em> a module. In a similar way, a Python Mixin class is not <em>meant</em> to be instantiated. We'll see some concrete examples later on.</p>\n<h2 id=\"organizing-responsibilities\" tabindex=\"-1\">Organizing Responsibilities <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>Here we follow along as the author walks us through another example. I like how she follows the progression of how one might initially tackle a given problem and then discusses how the design can be improved.</p>\n<p>In this example, we're looking at scheduling, which means we'll have a <code>Schedule</code> class, right? Okay, and then this class is responsible for <em>scheduling things</em>. Different things might have different constraints around being scheduled. In the current example, there's a certain amount of <em>lead time</em> involved.</p>\n<p>In a first version, some object asks the <code>Schedule</code> class if some target object could be scheduled. The <code>Schedule</code> class then switches on type (uh oh, code smell!) to decide how many lead days to include in the schedule calculation.</p>\n<p>Well, not to worry, we know all about using duck types to remove these type switches: The things we want to schedule should implement the <code>Schedulable</code> duck type, which means we can <em>ask</em> them how many lead days they need. No more type switching required.</p>\n<p>But according to the author, that's still bad design! Here's the logic:</p>\n<ul>\n<li>Some <em>instigating object</em> wants to know if <code>target</code> is schedulable.</li>\n<li>So why not ask the <code>target</code> directly? Let objects speak for themselves!</li>\n</ul>\n<p>The author uses a great example to show why this is a much better design than using the <code>Schedule</code> class. I'll translate it to Python. If you have a python string, you can call all sorts of useful methods on that string: Convert to upper-case, split into multiple strings based on some delimiter, and so on. It would be very un-pythonic (and un-OOD) to have a string just be a dumb (i.e. no useful methods) holder of bytes and move all the string manipulation into a <code>StringUtil</code> class.</p>\n<p>Great, so how do we go about this? As with classical inheritance, first we'd implement the role <em>concretely</em> in one of the classes that exhibit that role. So we pick one of the things that we want to be able to schedule, and implement the <code>can_schedule</code> method there. Then we refactor and move the <em>general</em> things <em>up</em> the hierarchy. In Ruby, we'd use a module. In Python, we'd use a Mixin class.</p>\n<p>The &quot;techniques&quot; are the same as with inheritance, really: Use hook methods, promote abstractions up the hierarchy instead of pushing concretions down. And think of Mixins as &quot;behaves as&quot; instead of &quot;is a&quot;.</p>\n<p>How to go about this?</p>\n<ul>\n<li>First implement the role concretely in one of the classes that should exhibit the role</li>\n<li>Then refactor to move things &quot;up&quot; the hierarchy.</li>\n<li>In Ruby, use module</li>\n<li>In Python, use multiple inheritance</li>\n</ul>\n<p>Use all the same techniques! Hook methods! Promoting abstractions up instead of pushing concretions down.</p>\n<p>Think of mix-ins as &quot;behaves as&quot; instead of &quot;is-a&quot;.</p>\n<p>Now let us conclude this section by writing a Python Mixin that roughly does what the Ruby module in the author's example does: So we identified that there is a <em>role</em> for objects to be <code>Schedulable</code>, which means they should implement the two methods <code>is_scheduled(start_date, end_date)</code> and <code>can_schedule(start_date, end_date</code>. But really, for pretty much all the objects playing this role, the <em>behavior</em> will be generally the same: There are some lead days to take into account and then we just look it up. So we also add a <code>lead_days</code> method, meant to be overridden by classes who include the mixin. Here's how it would look:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SchedulableMixin</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (1)</span>\n    \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#(2)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>__schedule <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>__schedule <span class=\"token operator\">=</span> Schedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__schedule\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">can_schedule</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>is_scheduled<span class=\"token punctuation\">(</span>start_date <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>lead_days<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                                     end_date<span class=\"token punctuation\">)</span> <span class=\"token comment\">#(3)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_scheduled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#(4)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">.</span>is_scheduled<span class=\"token punctuation\">(</span>start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">## Includers may override: #(5)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lead_days</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></code></pre>\n<p>Let's discuss:</p>\n<ul>\n<li>(1) We add the &quot;Mixin&quot; prefix to make it clear that this isn't meant to be a standalone base class, even though there are no abstract methods.</li>\n<li>(2) To be schedulable, you need to keep track of when you've been scheduled. Moving this <code>Schedule</code> object <em>into</em> the mixin puts the overall responsibiltiy of this on the <code>SchedulableMixin</code> and thus reduces the coupling of classes. Here we use double-underscores to make use of Python's &quot;name mangling&quot; feature: If we had named the field <code>self._schedule</code> instead, and if a class that inherits from <code>SchedulableMixin</code> also happened to have a <code>_schedule</code> field, we would be running into a name clash! With the double-underscore, Python just renames <code>__schedule</code> behind the scenes into <code>_SchedulableMixin__schedule_</code>. So, technically there is still the potential for name clashes if the other class for whatever weird reason also had a field called <code>_SchedulableMixin__schedule_</code>. But if you use such weird names without good reason you've really only got yourself to blame.</li>\n<li>(3) This is the &quot;meat&quot; of the general behavior that all the objects playing the <code>Schedulable</code> role share: You can schedule a schedulable object if it hasn't been scheduled during the start date, including any lead time, up until the end date.</li>\n<li>(4) Now we just delegate to the contained <code>Schedule</code> object (see next chapter for a deep dive into composition).</li>\n<li>(5) In certain languages (Java for example) you can explicitly declare that certain methods may <em>not</em> be overridden. Both Ruby and Python do not have this feature, so we just use comments to explain to users: &quot;This <code>lead_days</code> method is what you should override, but the rest is general logic that probably should remain untouched&quot;. Here we use the hook method technique, as introduced in the previous chapter, to allow classes that inherit from this Mixin to provide their own specialization. The design message then is: Every class that inherits from <code>SchedulableMixin</code> <em>behaves as a</em> <code>Schedulable</code>, and they only differ in their number of lead days.</li>\n</ul>\n<h1 id=\"writing-inheritable-code\" tabindex=\"-1\">Writing Inheritable Code <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h1>\n<p>Sharing inherited behavior without introducing undue coupling or hard-to-extend rigid hierarchies requires very specific coding techniques! Let's take a look at some:</p>\n<h2 id=\"recognize-the-antipatterns\" tabindex=\"-1\">Recognize the Antipatterns <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>Your code <em>might</em> benefit from inheritance if...</p>\n<ul>\n<li>You use a variable like <code>type</code> or <code>category</code> or whatever.\n<ul>\n<li>In this case, classical inheritance might be good! (See also here <a href=\"https://refactoring.guru/replace-type-code-with-subclasses\">https://refactoring.guru/replace-type-code-with-subclasses</a>)</li>\n<li>Put common abstraction in base class.</li>\n<li>Provide <em>specializations</em> in the child classes.</li>\n<li>And remember the Liskov Substitution Principle!</li>\n</ul>\n</li>\n<li>A <em>sending object</em> checks class type to decide on what message to send.\n<ul>\n<li>In this case, all the potential receivers play a common <em>role</em>.</li>\n<li>That <em>role</em> is a <em>duck type</em>.</li>\n<li>If duck types share <em>behavior</em> in addition to the interface, realize that via mix-in.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"insist-on-the-abstraction\" tabindex=\"-1\">Insist on the Abstraction <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>The code, both concrete and abstract, that is contained in an abstract superclass must apply to <em>every</em> class that inherits it. No exceptions. There is a code smell named after this: <a href=\"https://refactoring.guru/smells/refused-bequest\">Refused Bequest</a>.</p>\n<p>And why is this a bad code smell? Because faulty abstractions lead to ugly hacks and fragile workarounds. Remember the subcalss relationship: If <code>A</code> inherits from <code>B</code>, then <code>A</code> <strong>is a</strong> <code>B</code>. If <code>A</code> then overrides one of <code>B</code>'s methods to, say, <code>raise NotImplementedError</code> then <code>A</code> basically says &quot;Yeah I'm not <em>really</em> a <code>B</code>&quot;.</p>\n<p>Sometimes the problem can be solved by realizing that in your initial writing of the abstract class you added too much concrete code; code that should better be put into the child classes that actually use it. But sometimes there just isn't a good abstraction. In that case, don't use inheritance. You can still avoid code duplication using other techniques, such as composition (next chapter!).</p>\n<h2 id=\"honor-the-contract\" tabindex=\"-1\">Honor the Contract <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>A subclass does not just inherit the public interface of its superclass. It also inherits the <em>expected behavior</em> of such an interface. In a proper class hierarchy, a subclass promises to be <em>substitutable</em> for its superclass. If <code>A</code> inherits from <code>B</code>, then any method that thinks it's working with a <code>B</code> should do just fine working with an <code>A</code>. Think about what would happen if a subclass <em>wasn't</em> substitutable. Then every bit of code that works with class <code>B</code> now has to explicitly check whether you <em>actually</em> gave it a <code>B</code> or snuck in an <code>A</code> instead, and we're back at being tightly coupled to classes, when the whole point of using inheritance in the first place was to avoid explicit type checks.</p>\n<p>Recall the Liskov substitution principle. A subclass and its methods <em>may</em> accept broader inputs than the superclass, because then it will <em>definitely</em> accept the inputs that are valid for the superclass. And it <em>may</em> return narrower results than the superclass, because then its results will <em>definitely</em> be valid results of the superclass. That way, there can be no nasty surprises. Here is an example:</p>\n<p>Let's say we have a class doing some math work on numbers, with a superclass having methods that accept and return integers, both positive and negative. With the principle above in mind, then, we could think of subclasses working with different numbers:</p>\n<ul>\n<li>A subclass's methods could accept floats as well as integers.</li>\n<li>A subclass's methods might only return <em>positive</em> integers.</li>\n</ul>\n<p>But here are some <em>invalid</em> examples:</p>\n<ul>\n<li>A subclass must not <em>refuse</em> to accept negative integers!</li>\n<li>The subclass cannot <em>return</em> floating point numbers!</li>\n</ul>\n<p>If a subclass did either of those two things, it could not be substituted for the superclass.</p>\n<p>But <em>honoring the contract</em> goes further than just making sure that the types of arguments and return values match. It really means: Make sure nobody who is working with your class hierarchy has to ever explicitly check which particular subclass you passed. To quote the author:</p>\n<blockquote>\n<p>An object should act like it claims to be</p>\n</blockquote>\n<p>I'll leave with this counter-example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlackHole</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code></pre>\n<p>This class claims that it <em>is a</em> list, but definitely doesn't behave like one...</p>\n<h2 id=\"use-the-template-method-pattern\" tabindex=\"-1\">Use the Template Method Pattern <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>We talked about this at length in the previous chapter. This is the best pattern for writing code that is readily inheritable. It forces you to think carefully about what's abstract and what's concrete. The abstract part is the &quot;general algorithm&quot; and the concrete part are the specializations.</p>\n<p>In this case, it also helps to make explicit which methods are meant to be overridden (the template methods) and which methods are part of the &quot;stable&quot; abstract algorithm. In some languages, you can use a keyword such as <code>final</code> to prevent a method from ever being overridden by a subclass, but in Python we can only use comments. (There is a proposal to add such a <code>final</code> qualifier to Python's type hints, but remember that type hints have no effect on the running of the Python program; they're merely annotations and comments for the programmer and some external tools.)</p>\n<h2 id=\"preemptively-decouple-classes\" tabindex=\"-1\">Preemptively Decouple Classes <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>If at all possible, avoid writing code that <em>forces</em> an overriding method to call <code>super()</code>. This would lead to strong coupling between the super- and subclass. As we have seen in the last chapter, hook methods are the way to go here: They keep the superclass in control of the algorithm, and absolve the subclasses from having to know about when and how to call the super-version.</p>\n<p>One exception to this, I would say, is the <code>__init__</code> method. In some languages, when you create an instance of a subclass, the constructor of the superclass gets called automatically. This is not the case in Python, and so it's a very common occurrence that your subclass's <code>__init__</code> calls <code>super().__init__()</code>, although you could also consider using a <code>post_init()</code> hook method.</p>\n<p>One note about hook methods, though: They only work in <em>shallow</em> hierarchies, one level deep. If you go deeper, you might have to call <code>super()</code> after all. This leads us to the next point:</p>\n<h2 id=\"create-shallow-hierarchies\" tabindex=\"-1\">Create Shallow Hierarchies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h2>\n<p>A class hierarchy can be shallow or deep, and it can be narrow or wide. The ideal hierarchy, from the point of readability and understandability, is of course shallow and narrow: Only a few child classes, and only one level deep.</p>\n<p>The worst hierarchies are deep and wide. They are too complex to understand and often too rigid in their design. Avoid those!</p>\n<p>What's still okay are shallow and wide hierarchies. It just means that your one base class has many useful specializations. It should still be relatively easy to reason about such a hierarchy.</p>\n<p>What's not so okay are deep and narrow hierarchies. According to the author, there's two issues with them. First, over time they grow wider anyway as we add new classes here and there at different levels of the hierarchy. Second, most people only understand the ends of the hierarchy: The classes at the top and the classes at the bottom, with lots of mystery and confusion in the middle.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2021-01-08-poodr-chapter7/\">#</a></h1>\n<p>The first thing to check with mixins / modules is whether they <em>actually</em> represent a <em>role</em> that an object might play. The coding techniques to make mixins and modules successful are the same patterns that make classical inheritance successful. And when an object acquires behavior via inheritance, it should honor the contract implied by that relationship.</p>\n",
			"date_published": "2021-01-08T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/",
			"url": "https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 6",
			"content_html": "<p>This is the sixth part in my review and reading notes on the Practical Object Oriented Programming book (www.poodr.com) by Sandi Metz.</p>\n<p>So, let's talk inheritance. It might seem strange that, in a book about object oriented design, inheritance only shows up this late in the game. Isn't inheritance <em>the</em> OG object oriented feature? Well, let's see!</p>\n<p>Some recap thoughts:</p>\n<ul>\n<li>In a well-designed application, code is easy to reuse, and is also actively being reused to solve different problems.</li>\n<li>If your classes are small, have minimum context, have their dependencies injected into them, and furthermore have clear public interfaces, then they're already super reusable!</li>\n<li>So where does that leve inheritance?</li>\n</ul>\n<p>I appreciate the authors goal: There's a <em>know how</em> to using inheritance, and there's also the (even more important) question of <em>whether</em> to use it at all.</p>\n<h1 id=\"understanding-classical-inheritance\" tabindex=\"-1\">Understanding Classical Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h1>\n<p>Without getting philosophical about inheritance and taxonomies and &quot;is-a&quot; relationships, at its practical core inheritance is about message delegation: If an object receives a message, it either deals with the message itself, or it delegates the message to another object. All inheritance does is say: <em>Any</em> message you don't understand yourself, please delegate to the class you're inheriting from.</p>\n<p>But leaving it at this level is dangerous. There are certainly <em>misuses</em> of inheritance that create unnecessary coupling and rigid structures that make your code hard to maintain and extend!</p>\n<h1 id=\"recognize-where-to-use-inheritance\" tabindex=\"-1\">Recognize Where To Use Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h1>\n<p>So here the author gives a good example where inheritance will be useful; but also discusses <em>how</em> we go about recognizing this in general, and how we then go about <em>introducing</em> inheritance. One main takeaway right away: It's pretty much <em>never</em> a good idea to <em>start</em> with some preconceived idea of what the inheritance structure (the family tree, so to speak) of your classes <em>should</em> look like. Let the concrete objects you have be your guide!</p>\n<h2 id=\"starting-with-a-concrete-class\" tabindex=\"-1\">Starting with a Concrete Class <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Here the author just introduces a concrete class that does a concrete thing. A bicycle, in this case, that has some info about its tires and about what sort of spare parts it needs.</p>\n<h2 id=\"embedding-multiple-types\" tabindex=\"-1\">Embedding Multiple Types <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>In this chapter, we introcuce some extra behavior, some twist, in our concrete class: We want to add something that is <em>almost</em> like the thing we already have. This happens <em>all</em> the time! It is at this point very tempting to just bolt that extra stuff onto the class we already have. (Here it is again, that strong focus on classes that are already there!)</p>\n<p>Often, this sort of bolting-on involves adding a switch to our class. In this case, the <code>Bicycle</code> class gets a field that says whether a particular instance is a road bike or a mountain bike. And then the class's methods involve checking what that type field is set to.</p>\n<p>This is bad! It is just like the antipattern (code smell) from the previous section. Just as we shouldn't switch on an object's class so we shouldn't switch on a class's &quot;type&quot; or &quot;style&quot; variable: It leads to rigid code that's awkward to extend, and it also leads to lots of duplications as our class will be littered with these type checks.</p>\n<p>In more direct terms, adding such a type or style field violates the single responsibility principle, because with that switch we literally state that our class does either one thing or another thing.</p>\n<h2 id=\"finding-the-embedded-types\" tabindex=\"-1\">Finding the Embedded Types <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Such a type check is really a strong hint that we should be dealing with two different classes. It may very well be the case that these classes share lots of behavior, but they also differ across some aspects, as expressed by that <code>style</code> variable. This is exactly the situation where inheritance <em>can</em> be useful.</p>\n<h2 id=\"choosing-inheritance\" tabindex=\"-1\">Choosing inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>The automated delegation that happens with inheritance means that a subclass is everything the superclass is <em>and then some</em>. The subclass <em>acquires</em> the complete public interface of its superclass. This brings with it certain <em>responsibilities</em>: The superclass's public interface represents a certain contract; certain promises about what the public interface achieves. Your subclass must honor this contract!</p>\n<h2 id=\"misapplying-inheritance\" tabindex=\"-1\">Misapplying Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Before we see how <em>good</em> inheritance looks like, the author shows us how <em>bad</em> inheritance looks like. The hidden culprit here is, again, an overreliance on existing classes:</p>\n<p>The example had a concrete class <code>Bicycle</code> and then has <code>MountainBike</code> inherit directly from this concrete class. That led to a number of issues, becase the original bicycle class has behavior that <em>doesn't make sense</em> for a mountain bike (things like handlebar tape, apparently). There's a code smell with the name <em>Refused Bequest</em>:</p>\n<blockquote>\n<p>Sub-classes get to inherit the methods and data of their parents. But, what if they don't want or need what they are given? They are given all these great gifts and pick just a few to play with.\n-- Martin Fowler, Refactoring: Improving the Design of Existing Code</p>\n</blockquote>\n<p>Inheritance is all-or-nothing. By adding methods to your class's public interface, you <em>promise</em> that your class will <em>behave as expected</em> when someone calls these methods!</p>\n<p>As we will see below, writing classes that are &quot;open for extension&quot; (via inheritance) requires special care and techniques to reduce the risk of ending up with a strongly coupled mess.</p>\n<h2 id=\"finding-the-abstraction\" tabindex=\"-1\">Finding the Abstraction <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Given that subclasses are <em>specializations</em> of their superclasses, any object that expects to be working with an instance of the superclass should be able to work instead with an instance of the subclass <em>without knowing that it is dealing with a subclass</em>. This is the Liskov substitution principle, named after Barbara Liskov.</p>\n<h3 id=\"the-two-main-rules-of-inheritance\" tabindex=\"-1\">The Two Main Rules of Inheritance <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h3>\n<p>Inheritance can only work if these two things are true:</p>\n<ul>\n<li>If <code>Child</code> inherits from <code>Parent</code>, then <code>Child</code> <em>really</em> must be a <em>specialization</em> of <code>Parent</code>.</li>\n<li>You must use the correct coding techqniues. More on that later.</li>\n</ul>\n<p>In terms of specializations, here is a quick example of this principle gone wrong: If you see your inheritance tree as a sort of taxonomy where the child classes have an &quot;is-a&quot; relationship with the parent classes, you risk violating the &quot;specialization&quot; principle. For example, a <code>Square</code> <em>is a</em> <code>Rectangle</code> but code that expects a <code>Rectangle</code> to work with might <em>not</em> work with a <code>Square</code>, because a square is a <em>restricted</em> rather than an <em>extended</em> version of a rectangle.</p>\n<h2 id=\"creating-an-abstract-superclass\" tabindex=\"-1\">Creating an Abstract Superclass <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>So far we discussed why it is dangerous to just directly inherit from a concrete class. It is better to first find what the two concrete classes would have in common and extract that into a superclass. This class may very well be <em>abstract</em>. Such abstract classes <em>exist</em> to be subclassed.</p>\n<p>Also, if you remember the discussion from chapter 3, it is always better if classes that have many dependencies are more on the abstract side, as abstract qualities are less likely to change than concrete qualities.</p>\n<p>One note for those of us who are over-eager: Resist the temptation to <em>start</em> your coding with a big class hierarchy design up front. You almost never get it right. And in particular, don't create an abstract class if there would currently be only one concrete subclass. That would be premature, because you haven't yet seen on which dimension the other concrete classes would differ, and on which dimensions they would share behavior! It is much better to wait until more information arrives.</p>\n<p>And the author says that even with <em>two</em> examples of concrete classes that <em>could</em> quite reasonably put some shared behavior into a common superclass, it might be premature to do so! Often best to wait for <em>three</em> examples. I've heard a similar &quot;three strikes&quot; rule for other occasions where you would want to remove duplication. There's a tension here between improving the design <em>right now</em> but risking getting it wrong versus living with a worse design <em>for now</em> but then having a better design once more information arrives. Check out the relevant chapter!</p>\n<h2 id=\"promoting-abstract-behavior\" tabindex=\"-1\">Promoting Abstract Behavior <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Okay, so now for the sake of example we <em>do</em> create an abstract class for <code>Bicycle</code> with the idea that <code>RoadBike</code> and <code>MountainBike</code> will be subclcasses. We could go about this <em>refactoring</em> in two ways:</p>\n<ol>\n<li>We could add an empty class <code>RoadBike</code> that inherits from <code>Bicycle</code>. Then we <em>push down</em> the concrete stuff from <code>Bicycle</code> into <code>RoadBike</code> and leave only the abstract stuff behind.</li>\n<li>Or we could rename <code>Bicycle</code> to <code>RoadBike</code> and add an empty abstract class <code>Bicycle</code> from which <code>RoadBike</code> inherits. Then we <em>push up</em> all the general abstract stuff from the concrete class to the abstract class.</li>\n</ol>\n<p>Both sound innocent enough, but the author beautifully explains why one way leads to disaster! It boils down to the question &quot;Well, what if you're wrong?&quot;. If you pick option 2 and <em>push up</em> the abstract code, you might <em>miss</em> some of the abstract code. If some abstract behavior is missing in the base class, it will need to be <em>duplicated</em> in all the subclasses, and this duplication will be easy to spot and remedy.</p>\n<p>If, on the other hand, you pick option 1 and <em>push down</em> the concrete code, and you miss some of the concrete stuff, then your supposedly general, abstract, class is now <em>polluted</em> with concrete behavior. Other subclasses might start to depend on it, or they might have to &quot;deal&quot; with it much in the way that <code>MountainBike</code>, in the &quot;bad&quot; version, had to deal with concrete road bike behavior that it didn't need or want!</p>\n<h2 id=\"separating-abstract-from-concrete\" tabindex=\"-1\">Separating Abstract from Concrete <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Just a quick note here: Sometimes you can directly push a method up in the hierarchy,\nbut as the author explains with an example, sometimes you first have to pry apart the abstract and the concrete. Another argument for keeping your methods short and single-purpose! The top-level methods might be more on the abstract side and the lower-level methods called by them might be more on the concrete side. That allows for easy promotion up the class hierarchy. If you had just smashed everything into a single method, you might miss this opportunity!</p>\n<h2 id=\"using-the-template-method-pattern\" tabindex=\"-1\">Using the Template Method Pattern <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Another benefit of using small methods with single purpose is that your subclasses can override them, with great precision, to provide specialized behavior.</p>\n<h1 id=\"managing-coupling-between-superclasses-and-subclasses\" tabindex=\"-1\">Managing Coupling Between Superclasses and Subclasses <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h1>\n<p>Now it gets interesting and this often gets overlooked when using inheritance!</p>\n<ul>\n<li>Inheritance introduces coupling!</li>\n<li>This coupling must be carefully managed, just like any other coupling!</li>\n<li>Ideally this coupling will not be overly tight!</li>\n</ul>\n<h2 id=\"understanding-coupling\" tabindex=\"-1\">Understanding Coupling <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>Here's a special coupling that is unique to inheritance: If you've used inheritance, you have certainly come across this situation: A subclass overrides a method of the superclass but still relies on the superclass's implementation of that method, and it gets there via a call to\n<code>super</code>. Here is an example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Superclass</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>do_superclass_init_stuff<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Subclass</span><span class=\"token punctuation\">(</span>Superclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>do_some_special_subclass_init_stuff<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Looks innocent enough, but it might also show up in more complicated methods! The problem here is that we introduce a certain coupling: We need to know <em>when</em> and <em>how</em> and <em>if</em> to call the various methods of <code>super</code> in order to provide our specializations! Our subclass, when sending messages to <code>super</code>, basically says: &quot;I know the <em>algorithm</em>&quot;. But that knowledge belongs in the superclass!</p>\n<h2 id=\"decoupling-subclasses-using-hook-methods\" tabindex=\"-1\">Decoupling Subclasses Using Hook Methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h2>\n<p>If the superclass controls the algorithm, it must allow the subclasses to provide specialized behavior in certain predefined places. This is achieved via hook methods. In the example above, we would rewrite it like so:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Superclass</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>do_superclass_init_stuff<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>post_init<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">post_init</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">pass</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Subclass</span><span class=\"token punctuation\">(</span>Superclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">post_init</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>do_some_special_subclass_init_stuff<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init_args<span class=\"token punctuation\">)</span></code></pre>\n<p>Here, <code>post_init</code> is a <em>hook method</em>. The superclass decides when in the init process it gets called, and it provides a default implementation that does nothing. The subclass overrides it to provide its specialization.</p>\n<p>This approach is also called the <em>template method pattern</em>. The superclass's\nresponsibility is to know the abstract concept of what needs to happen, i.e.,\nwhat methods need to be called. The subclasses are responsible for filling in\nthe blanks, without having to know exactly where in the algorithm these blanks\nare.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-27-poodr-chapter6/\">#</a></h1>\n<p>Main takeaways: Inheritance works best if there is some <em>stable abstraction</em>\nwhere you have at least <em>three</em> concrete examples (to really nail down what the\ncommon abstraction should be). Using the template method pattern and hook\nmethods means that your subclasses can fully focus on providing their\nspecializations without having to know the abstract algorithm of your\nsuperclass.</p>\n",
			"date_published": "2020-12-27T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/",
			"url": "https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 5",
			"content_html": "<p>This is the fifth part in my review and reading notes on the Practical Object Oriented Programming book (www.poodr.com) by Sandi Metz.</p>\n<p>In the last chapter, we learned how <em>messages</em> are at the heart of design, and that messages define the <em>public interface</em> of an object. Combining these two ideas leads to some interesting design consideration, and at the core of this chapter is the concept of <strong>duck typing</strong>.</p>\n<p>What <em>is</em> a <strong>Duck Type</strong>? Let's begin with where the name comes from. There's an old saying that says</p>\n<blockquote>\n<p>If it quacks like a duck and walks like a duck, it's a duck.</p>\n</blockquote>\n<p>What does that mean in the context of programming? Well, consider this:</p>\n<ul>\n<li>Python has no static types, and no type checking in, e.g., method signatures.</li>\n<li>If you have a message to send, you can send it to any object that implements that message, regardless of the class's actual type!</li>\n</ul>\n<p>And the point of all this? We replace a dependency on class with a dependency on messages:</p>\n<p>Recall our <code>job_helper</code> example: The first iteration had class <code>A</code> with <em>explicit</em> dependency on <em>class</em> <code>B</code>. After using dependency injection, class <code>A</code> instead depended on being passed <em>some</em> object that it could send the <code>process</code> message to. That job helper object is passed into the <code>__init__</code>, and no type checking takes place.</p>\n<p>And why is this better? Because it is more <em>flexible</em>. There is less coupling, and the code is ready for change.</p>\n<p><strong>Note:</strong> The following code would be very un-pythonic:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> job_helper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>job_helper<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>All of a sudden we're back with having class <code>A</code> explicitly depend on class <code>B</code>, and making some unreasonable demands: Now the only way to pass a <code>job_helper</code> into class <code>A</code> is to pass an instance of class <code>B</code> into it. If we want to modify some behavior by passing a different class in, that class now needs to <em>inherit</em> from <code>B</code>, creating even more coupling.</p>\n<p>If you <em>absolutely</em> need to exert this type of control, pick a statically typed language where you don't have to manually add boilerplate type checking code. As the autor writes, users of an object <em>need not</em> and <em>should not</em> be concerned about its class.</p>\n<p>Duck typing essentially means: An object is what its interface says it is. Which means a single object can implement many different interfaces, and an application can contain many interfaces that cut across classes.</p>\n<p>So let's see what that means</p>\n<h2 id=\"overlooking-the-duck\" tabindex=\"-1\">Overlooking the Duck <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<p>In this section, we follow along as the author shows how you quickly end up with messy, coupled, code if you happily code away and <em>miss</em> where there could be a <em>duck type</em> hiding among your objects.</p>\n<p>The example is quite instructive, and the code that the author calls ugly is indeed a well-known <em>code smell</em>: Having a <code>switch</code> statement (or an <code>if-else-if</code> block) that checks an object's type and then sends a different message based on that object's type.</p>\n<p>If you are overly focused on your existing objects, it is dangerously easy to arrive at such smelly code: You realize that your class <code>A</code> might reasonably collaborate with either class <code>B</code> or class <code>C</code>, but the message you have to send in either case is different, so you do something like</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresult <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span>some_message<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresult <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span>some_other_message<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Why is this a code smell? Because it makes your code hard to extend and introduces a strong coupling to type. If you find that yet another class <code>D</code> could be a good collaborator, you have to go to each and every of your <code>if-elif</code> blocks and add that code, duplicating a lot of knowledge in the process.</p>\n<p>Remember, too, that in our list of basic dependencies, we had &quot;knowing the name of a message to send&quot;. If every single of our potential collaborators requires a different message to be sent, we end up with <em>lots</em> of these dependencies.</p>\n<h2 id=\"finding-the-duck\" tabindex=\"-1\">Finding the Duck <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<p>So how do we prevent ending up with messy class-dependent code? It's actually quite straightforwad and rests on a few simple observations:</p>\n<ol>\n<li>Our smelly code needs the type switching because we need to send a different message to each potential collaborating class based on its underlying type.</li>\n<li>So if we <em>could</em> somehow send the <em>same</em> message regardless of underlying class, there'd be no need for this messy switching!</li>\n</ol>\n<p>But what message to send? A few more observations:</p>\n<ol>\n<li>Your class should have a single responsibility, and therefore:</li>\n<li>Its methods should have a single goal in service of that responsibility.</li>\n<li>Therefore, your class's <em>collaborators</em> arrive at the class (or the method) in service of that goal!</li>\n</ol>\n<p>No matter the collaborator's actual underlying class and thus overall responsibility, it arrives at your class or method with a single job: Help fulfill the class's or method's goal!</p>\n<p>And there's your duck type. In the authors example, we have a <code>Trip</code> that needs to be <code>prepare</code>'d. A number of classes arrive to help it do that, including a <code>Mechanic</code>, a <code>TripCoordinator</code> and a <code>Driver</code>. No matter what a Mechanic or a Trip Coordinator or a Driver <em>generally</em> does, they arrive at the <code>prepare</code> method with one goal: Help prepare the trip. Therefore, they should all implement a <code>prepare_trip()</code> method.</p>\n<p>In a statically typed language such as Java, you would now explicitly <em>declare</em> an <em>interface</em> like so</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Preparer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prepare_trip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Trip</span> trip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>and then you would explicitly state that your various classes <em>implement</em> this interface</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mechanic</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Prepapre</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prepare_trip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Trip</span> trip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Specific prepare stuff for Mechanic</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>and the trip class's prepare method would explicitly ask for a list of preparers:</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trip</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Preparer</span><span class=\"token punctuation\">></span></span> preparers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Iterate over preparers and call their prepare_trip method</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In a dynamically typed language, however, there is no need to explicitly create and define these interfaces. But just because you did not explicitly write down that there's such a thing as a <code>Preparer</code> does not mean such a type is not hiding in your application.</p>\n<p>At this point you might object: What if the different preparers need to <em>know</em> different things about the trip? In the pre-duck-type'd version, we'd have <code>prepare_bicycle(bike)</code> and maybe\n<code>fill_up_vehicle(vehicle)</code> and <code>buy_food(customer)</code>. Now we want to just send <code>prepare_trip</code> each time.</p>\n<p>The message sequence diagrams in the book show the answer: To prepare a trip, we send the <code>prepare_trip</code> message to our preparers, and the various implementations of <code>prepare</code> then send messages (queries, to be specific) back to the trip object: The mechanic asks for the bikes, the trip coordinator asks for the customers, and so on. This requires of course that <code>Trip</code> has a reasonable public interface that grants access to whatever the other collaborators need to know, and one should take care to follow all the good rules of interface design as discussed in the previous chapter.</p>\n<h2 id=\"consequences-of-duck-typing\" tabindex=\"-1\">Consequences of Duck Typing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<p>Let's quote Sandi directly with this great bit:</p>\n<blockquote>\n<p>The ability to tolerate ambiguity about the class of an object is the hallmark of a confident designer. Once you begin to treat your objects as if they are defined by their behavior rather than by their class, you enter into a new realm of expressive flexible design.</p>\n</blockquote>\n<p>As you rework your design, removing dependencies on <em>concrete</em> classes and instead introducing duck types, you move from the concrete to the abstract. This might <em>initially</em> be harder to understand, but such code is <em>much</em> easier to change and extend.</p>\n<p>The one drawback, so far, of introducing the duck type is that it is so ephemeral. When you rely on concrete classes, you can go to the implementation of the concrete class and see what it does. But in the example of the <code>Preparer</code>, there is no definite place you can go to see what <code>Preparer.prepare_trip</code> does. More on that later in this post (and in the book, of course.)</p>\n<h3 id=\"quick-side-note-python-s-magic-methods\" tabindex=\"-1\">Quick Side Note: Python's Magic Methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h3>\n<p>To see great use of duck typing in action, consider the way Python let's you control how <em>your</em> objects should be... printed, copied, iterated over etc:</p>\n<p>Any class that implements <code>__len__</code> and <code>__getitem__()</code> for integer indices is considered by Python to be a <em>Sequence</em>. No need to explicitly declare that your class implements some <code>Sequence</code> interface. And any piece of code that expects an object over which it can iterate, or whose elements it can access via an index, will work seemlessly with your class.</p>\n<h1 id=\"writing-code-that-relis-on-ducks\" tabindex=\"-1\">Writing Code that Relis on Ducks <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h1>\n<p>The implementation of a duck type itself is pretty easy. The hard part is in recognizing where and when you should be using one. So now the author discusses a few common patterns to look out for.</p>\n<h2 id=\"recognizing-hidden-ducks\" tabindex=\"-1\">Recognizing Hidden Ducks <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<p>Here the author again emphasizes that <em>switching</em> on class type is a bad code smell. Say you have a variable that could be one of several different types. As mentioned above, you need to then take a step back and ask: Why do I have this variable here in the first place? It arrived at your class, at your method, for a specific purpose, and <em>that</em> purpose informs the message you <em>should</em> be sending.</p>\n<p>This warning against switching on type also extends to switching on implemented methods: Imagine some horribly inconsistent API where you want to turn an object into a string and have to check individually whether your object implements <code>to_string</code> or <code>toString</code> or <code>convert_to_string</code> and then call that. An obvious eample of a missed duck type!</p>\n<h2 id=\"placing-trust-in-your-ducks\" tabindex=\"-1\">Placing Trust in Your Ducks <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<blockquote>\n<p>Flexible applications are built on objects that operate on trust; it is your job to make your objects trustworthy.</p>\n</blockquote>\n<p>Use the code smells mentioned above to find the missing duck: What does the offending code <em>really</em> want? Then define a duck type that does just that. Implement it in the relevant classes and enjoy the clean interface!</p>\n<p>What follows in the book are a few rather short sections discussing a few more fine points. Maybe it's enough to briefly summarize them:</p>\n<ul>\n<li>Because a duck type does not concrentely exist in the form of an explicitly defined interface, it is important to document and test their interface appropriately. More on that in Chapter 9.</li>\n<li>Sometimes, duck types need to share behavior instead of just their interfaces. This is discussed in Chapter 7.</li>\n</ul>\n<h3 id=\"quick-side-note-none-type\" tabindex=\"-1\">Quick Side Note: None Type <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h3>\n<p>As an example of a type check that <em>is</em> okay, the author gives the example where some object could be either of a certain class type, or it could be <code>None</code> (<code>NilClass</code> in the Ruby example). If that other type is a basic type, then we're in a situation where the classes we now depend on (say, <code>NoneType</code> and <code>list</code>) are much more stable than our own class. It is then okay to depend on it.</p>\n<p>I would like to add a thought here, though: If your code is littered with checks for something being <code>None</code>, it might be better to use a design pattern called <em>Null Object</em>, that is, having an explicit class that represents some other class not being there:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">if</span> this_object <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\tdo_the_thing_where_it_is_none<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\tthis_object<span class=\"token punctuation\">.</span>do_something_fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>could be transformed to:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">this_object<span class=\"token punctuation\">.</span>do_something_fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>as long as we have</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FunObjectNullType</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_something_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># Actually do the thing where it's None</span></code></pre>\n<p>That way, the responsibility of checking for <code>None</code> everywhere is removed from the client code and instead moved to a specific place: This class then has a clear, single, responsibility: Deal with some sort of default behavior.</p>\n<h2 id=\"conquering-fear-of-duck-typing\" tabindex=\"-1\">Conquering Fear of Duck Typing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h2>\n<p>A great chapter! The message ultimately boils down to: If you are writing in a dynamically typed language (Ruby, Python, ...) and try to <em>force</em> it to behave like a statically typed language (Java, C#, ...) you get the <em>worst</em> of both worlds.</p>\n<p>This section isn't meant to be a discussion of which sort of typing is <em>better</em>. The answer to that will very much depend on your particular situation and preferences. Both approaches undeniably have their benefits and their trade-offs.</p>\n<p>Think about it like this: For a particular home improvement project, you might be best off using nails. For another project, screws will be better. For some, it will be purely a matter of taste. But no matter which you choose, once you have made the choice you better use the right tool associated. Don't pick screws for your project and then bash them in with a hammer.</p>\n<h3 id=\"subverting-duck-types-with-static-typing\" tabindex=\"-1\">Subverting Duck Types with Static Typing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h3>\n<p>Just as a recap: In static typic, each and every variable, method argument, and method return value have a single type, and you must explicitly declare what that type is: &quot;This variable shall be a string, and this variable shall be a floating point number and this method returns an instance of <code>SomeClass</code>&quot;. With dynamic typing, you <em>don't</em> do any of that.</p>\n<p>Quick side note: Python has recently introduced type <em>hints</em>. It might <em>look</em> like static typing on the surface, but it is not. These hints are purely meant as a bit of documentation and as means for your IDE to show useful parameter hints. The python runtime itself will not care one bit whether you pass a floating point number into a method whose argument had a <code>str</code> type hint.</p>\n<p>Some people are so uncomfortable with dynamic typing that they hack static typing into the language. Their code is littered with <code>isinstance</code> checks, but doing so subverts the power of dynamic typing. You cannot write beautifully flexible code with duck typing if your code fails when &quot;the wrong type&quot; arrives.</p>\n<p>Another Python side note: With Python's Abstract Base Class module, you can define an <em>abstract</em> class that merely specifies the interface of your duck type. You can then implement the <code>__subclasshook__</code> class-method where <em>you</em> get to control how a type check against your abstract base class is performed. For a duck type, this would just be about checking whether certain methods are implemented. This technique has indeed the potential to give you the best of both worlds: Duck typing because your concrete classes don't need to inherit from any particular base class, and type checking in a place where you think you <em>absolutely</em> need it. That being said, strongly consider whether you <em>really</em> need to put type checks into your code.</p>\n<h3 id=\"static-versus-dynamic-typing\" tabindex=\"-1\">Static versus Dynamic Typing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h3>\n<p>Here we get a fair comparison of the benefits of either static or dynamic typing. Note though that these benefits depend on certain assumptions. I don't think I need to recite this section here. It's pretty straightforward.</p>\n<h3 id=\"embracing-duck-typing\" tabindex=\"-1\">Embracing Duck Typing <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h3>\n<p>A great discussion: Some of the perceived &quot;dangers&quot; of dynamic typing are not actually a big deal. One oft-cited benefit of static typing is that the <em>compiler</em> will catch (some, but certainly not all. Or why else would Java need a <code>NullPointerException</code>?) type errors at compile time, which is better than your program suddenly crashing at run time.</p>\n<p>Technically this is true, but according to the author, this great big boogeyman of runtime type errors is greatly exaggerated. Yes, a dynamically typed language puts the burden on you to pass in objects that respond to the message they're being sent. But if your program is designed well, using trustworthy and expressive code, such type errors should be exceedingly rare. If that is the case, static typing may very well be the equivalent to Springfield's Bear Patrol: https://www.youtube.com/watch?v=fm2W0sq9ddU</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-12-03-poodr-chapter5/\">#</a></h1>\n<p>Judge objects by what they do, not by who they are!</p>\n",
			"date_published": "2020-12-03T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/",
			"url": "https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 4",
			"content_html": "<p>This is the fourth part in my review and reading notes on the Practical Object Oriented Programming book (www.poodr.com) by Sandi Metz.</p>\n<p>Okay now it's getting interesting: OOD is about <em>messages</em> more than <em>classes</em>.</p>\n<ul>\n<li><em>What</em> objects know = Their responsibilities</li>\n<li><em>Who</em> objects know = Their dependencies</li>\n<li>How classes <em>talk</em> to each other = The messages and their <em>interfaces</em></li>\n</ul>\n<h1 id=\"understanding-interfaces\" tabindex=\"-1\">Understanding Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h1>\n<p>Nerd time: Think of classes as nodes in a graph, and of messages as directed edges. Good design has a <em>sparse</em> graph: Any given node should have a relatively low number of outgoing edges, or at least there should be small clusters of higher connectivity, with the clusters in turn being loosely connected to each other.</p>\n<p>More nerd time: If &quot;everybody talks to everybody else&quot;, then with <em>N</em> classes you will have\nO(N^2) edges. That is, the number of communication paths grows quadratically with the number of classes. That quickly becomes overwhelmingly complex.</p>\n<p>Hyper-connected objects are difficult to reuse and change.</p>\n<p>Instead, low-connected components allow easy reuse and low-consequence change.</p>\n<p>High-density message graph is <em>not</em> necessarily the result of failed dependency injection or single responsibility! You can easily design an application that follows those principles while still ending up with a dense message graph.</p>\n<p>Problems aren't with what the class <em>does</em> but with what it <em>reveals</em>. To arrive at a low-density message graph, you need to <em>constrain</em> which messages can pass between objects.</p>\n<p>In some programming langauges, a class can explicitly declare its methods to be either public or private. In Python, though, all class attributes and methods are public. There is, however, a <em>convention</em> which states that, as a programmer, you should treat attributes and messages that start with an underscore <em>as if</em> they were private. That is: Don't depend on their behavior, don't depend even on their existence. With the underscore prefix, you signal to other programmers and to yourself that this message is not part of the class's public interface.</p>\n<p>In this chapter, <em>interface</em> refers to the methods <em>within</em> a class, as opposed to the more abstract concept of interface we'll talk about in the next chapter.</p>\n<h1 id=\"defining-interfaces\" tabindex=\"-1\">Defining Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h1>\n<p>The author gives a great example of an interface that hides complex implementation details with the restaurant kitchen analogy. Another example I can think of: The devices we use every day also have devices that hide the implementation details. I don't need to know anything at all about electronics to use a TV. I don't need to know anything about how an internal combustion engine <em>actually</em> works to drive a car. The interface provides me with means of telling the device <em>what</em> I want from it (go faster, slow down, go left, go right) without me having to bother at all <em>how</em> this behavior is achieved.</p>\n<h2 id=\"public-interfaces\" tabindex=\"-1\">Public Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Just some bullet points here.</p>\n<ul>\n<li>Public methods = Face of your class</li>\n<li>Tell you what it's primary responsibility is</li>\n<li>Are <em>expected</em> to be invoked by others</li>\n<li>Will <em>not</em> change on a whim.</li>\n<li>Are (more or less) safe for others to depend on.</li>\n<li>Are thoroughly documented in tests.</li>\n</ul>\n<h2 id=\"private-interfaces\" tabindex=\"-1\">Private Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>All other methods = private interface</p>\n<ul>\n<li>Handle implementation details</li>\n<li>Are <em>not</em> expected to be sent by other objects</li>\n<li>Chan change for any reason whatsoever</li>\n<li>Are <em>unsafe</em> for others to depend on</li>\n<li>May not even be referenced in tests</li>\n</ul>\n<h2 id=\"responsibilities-dependencies-and-interfaces\" tabindex=\"-1\">Responsibilities, Dependencies, and Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<ul>\n<li>If a class has a single <em>purpose</em>, then things it does (its specific <em>responsibilities</em>) are what allow it to fulfill that purpose.</li>\n<li>Public methods = description of its responsibilities.</li>\n<li>Public interface is a <em>contract</em>.</li>\n<li>Example of Stack: <code>push</code> and <code>pop</code> is pretty much all you need. Internal details should be hidden.</li>\n<li>Remember: Depend on things that are more stable than you. Applies to classes (previous chapter) but also applies to methods. What's that mean? Don't <em>depend</em> on private methods.</li>\n</ul>\n<h1 id=\"finding-the-public-interface\" tabindex=\"-1\">Finding the Public Interface <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h1>\n<ul>\n<li>It's an art</li>\n<li>No hard rules</li>\n<li>Recall the design goal: Maximum future flexibility with not too much work right now.</li>\n<li>Now some rules of thumb and a new tool: Sequence Diagrams.</li>\n</ul>\n<h2 id=\"example\" tabindex=\"-1\">Example <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Author introduces an example <em>domain</em>. I won't repeat that here.</p>\n<h2 id=\"constructing-an-intention\" tabindex=\"-1\">Constructing an Intention <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Here author has a bit of a discussion on &quot;test first&quot; programming, also called TDD for Test-Driven Design. The idea of that design technique is to write unit tests first, and let the tests guide you into what code to write for your program. However, as the author argues, that often does not end well for <em>novices</em> to design, because if you don't know <em>which</em> tests to write, and <em>how</em> to write them, they cannot possibly guide you to a good design.</p>\n<p>Once you have acquired good design experience and intuition, you will know which tests to write to hone in on the specific design that will work well for your given situation.</p>\n<p>The authors calls this &quot;having an <em>intention</em> about the application&quot;: To write test-first in a good way, you need to know: &quot;I want my object to have this method, which should exhibit this behavior&quot;.</p>\n<p>Going a step further: Before writing these tests you also need an idea about <em>which</em> objects you will have. Novices focus overly on the <em>domain objects</em>. The concrete, tangible things. The <em>nouns</em> of the domain, if you will. What is more important, though, is what <em>message</em> you intend to pass between these objects!</p>\n<p>So before you do anything, figure out what objects <em>and</em> what messages you'll be dealing with.</p>\n<h2 id=\"sequence-diagrams\" tabindex=\"-1\">Sequence Diagrams <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>How do we sketch out what messages we're dealing with? Sequence diagrams! Subset of UML (Unified Markup Language) diagrams. I won't repeat the chapter content and diagrams here, just pointing out that there's a free Sequence Diagram Tool here:\nhttps://sequencediagram.org/</p>\n<p>Why are these diagrams so great? Because they force you to be clear about which messages you are going to send. That, in turn, allows you to ponder whether you're sending them from and to the right objects. And since you're only supposed to send messages that are in the public interface of classes, the diagram helps you figure out what the public interface should be.</p>\n<p>Let's emphasize this: Instead of deciding on a class, and <em>then</em> figuring out what its responsibilities are, you decide on a <em>message</em> you want to send, and then figure out who should send it, and where to.</p>\n<p>I'll quote:</p>\n<blockquote>\n<p>This transition from class-based design to message-based design is a turning point in your design career. The message-based perspective yields more flexible applications than does the class-based perspective. Changing the fundamental design question from “I know I need this class, what should it do?” to “I need to send this message, who should respond to it?” is the first step in that direction.</p>\n</blockquote>\n<blockquote>\n<p>You don’t send messages because you have objects, you have objects because you send messages.</p>\n</blockquote>\n<p>When focusing too much on classes, we risk that our messages aren't sent to the right place.</p>\n<p>The book then goes through a concrete example involving a bicylce trip agency and how a sequence diagram can help identify issues with the objects and messages.</p>\n<h2 id=\"asking-for-what-instead-of-telling-how\" tabindex=\"-1\">Asking For &quot;What&quot; Instead Of Telling &quot;How&quot; <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>One such issue is about messages that are too explicit in what exact behavior they want to see.</p>\n<p>You want to be sending messages that tell the receiver what sort of result you want from them. You want to avoid sending messages that tell the receiver how to behave.</p>\n<p>In the restaurant example, you tell the waiter which dish you would like. You don't tell the waiter &quot;Please write this dish and my table number onto this note and then go put that note onto the stack of kitchen orders and then wait for the chef to make the order and then bring it to me&quot;.</p>\n<p>The book example explains this via the bicycle mechanic class. In a first version, the trip class explicitly states all the different actions that a mechanic should take to prepare a bike. This is a case of telling &quot;how&quot;.</p>\n<p>A good test to see if your design falls into this trap is to imagine your classes again as people, where a message is like an order or request. Now imagine the sequence diagram as a conversation between the people. If one class feels like it's a tyrannical micro-manager toward another, you need to rethink your design!</p>\n<p>If your messages instead focus on the high-level tasks and results you want to see, the object that sends the message needs to know much less, and the object that performs the task can have a much smaller public interface.</p>\n<h2 id=\"seeking-context-independence\" tabindex=\"-1\">Seeking Context Independence <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>An object's <em>context</em> is formed by all the things it expects to be in place and available to perform its job. Typically, this context involves what sort of messages your object expects to be able to send to other objects, with some assumptions about the behavior.</p>\n<p>Look again at the toy example from my previous writeup, with dependency injection:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> job_helper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>job_helper <span class=\"token operator\">=</span> job_helper\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tintermediate_result <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>some_more_processing<span class=\"token punctuation\">(</span>intermediate_result<span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>Here, the <em>context</em> of class <code>A</code> is &quot;an object that understands the <code>process(arg1, arg2)</code> message&quot;.</p>\n<p>Obviously, the bigger an object's context, the harder it is to use, re-use, and test the class, because you first need to <em>create</em> the correct context. This suggests that good design seeks to write classes that require only a small context. The <em>best case scenario</em> of course is a class that is context-independent.</p>\n<p>To be context-independent means being able to cooperate with other objects without knowing <em>who they are</em> and <em>what they do</em>. Using dependency injection takes care of the <em>who</em> part. Rethinking the sequence of messages, and working toward simplifying the messages, takes care of the <em>what they do</em> part.</p>\n<p>I like the author's example here with the Trip and the Mechanic. The key technique the example in this subsection introduces is: You can simplify (and thus potentially unify) the message you send to your collaborator by <em>not</em> passing in lots of arguments, but rather having a public interface that lets your collaborator ask you for those arguments themselves.</p>\n<p>Maybe we can use the restaurant example again:\n<img src=\"https://cadolphs.github.io/images/poodr_4/burger_1.png\" alt=\"Sequence Diagram for ordering a burger explicitly\"></p>\n<p>Here we see a Customer ordering a burger, which needs a bit of extra info about the side dish. Sending messages like this requires having a method for each of the different things you could order in different ways. It means <code>Customer</code> expects in its context an object <code>Waiter</code> that understands all sorts of messages.</p>\n<p>If we have our objects collaborate more, however, we can have a simpler context:\n<img src=\"https://cadolphs.github.io/images/poodr_4/burger_2.png\" alt=\"Sequence Diagram for ordering a burger with less context\"></p>\n<p>and we'd imagine that it's the customer's interface's job to provide methods to inquire about certain preferences, like doneness of a steak, whether Pepsi is okay, and if there's allergies.</p>\n<h2 id=\"trusting-other-objects\" tabindex=\"-1\">Trusting Other Objects <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>In the real world, you are only comfortable asking for the what without specifying the how if you have trust that your counterpart is capable of fulfilling that request. When writing your own classes and objects, you should always trust an object that it is capable of fulfilling its responsibility!</p>\n<p>As the author argues, the various sequence diagrams of the section show how a programmer's understanding and use of objects improves over time:</p>\n<p>The first stab is essentially <em>procedural</em>. In a purely procedural program, you have some <code>main()</code> routine that, in sequence, calls the various procedures (functions) it needs to get its job done. Just because you put your <code>main</code> into one class and all the procedures it calls into another class does not make your code truly object oriented!</p>\n<p>In the next version, the detailed knowledge of which functions to call in what order to accomplish a given task has been moved to the correct class. The &quot;main&quot; class asks the helper class to achieve a specific result, but does not itself specify how that is achieved.</p>\n<p>In the final version, the <em>context</em> of the main class is reduced further. The difference in the author's example between <code>prepare_bicycle(bike)</code> and <code>prepare_trip()</code> is subtle but profound. Preparing a trip, rather than preparing a bike, is a more <em>general</em> concept. As such, it is more stable and more reusable. We <em>trust</em> that the Mechanic class itself knows that, in order to prepare a trip, it must prepare a bike.</p>\n<p>The impact of this subtle shift becomes more visible when we imagine that a trip has many different things that need to be prepared other than getting bikes ready. Code quickly becomes messy if we have to send specific &quot;you prepare this, and you prepare that&quot; messages to all the different classes that help us get ready for a trip. Much better if we can just send each class the same <code>prepare_trip</code> message and the classes themselves know what to do.</p>\n<h2 id=\"using-messages-to-discover-objects\" tabindex=\"-1\">Using Messages to Discover Objects <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>The sequence diagrams should be understood as lightweight, temporary, throw-away tools that help us discover which objects our application needs. We do this by examining what types of messages are reasonable to <em>send</em> and then carefully scrutizing what sort of object should be responsible for <em>receiving</em> that message.</p>\n<p>This view of putting messages first is incredibly helpful. Focusing too much on the existing objects makes it tempting to just shove messages into whatever objects are already there. Focusing instead of the messages we want to send allows us to create the right class, with the right single responsibility, for handling that message.</p>\n<h1 id=\"writing-code-that-puts-its-best-interface-forward\" tabindex=\"-1\">Writing Code That Puts Its Best Interface Forward <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h1>\n<p>In this section, the author shares useful rules of thumb for creating good public interfaces. In any way, you should always <em>think</em> carefully about your interfaces, as they control more than anything else how your codebase will evolve.</p>\n<h2 id=\"create-explicit-interfaces\" tabindex=\"-1\">Create Explicit Interfaces <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Python has no explicit concept of private versus public methods, but convention says that methods prefixed with <code>_</code> should be <em>considered</em> private and <em>not</em> be depended upon.</p>\n<p>The public methods are those that you want other classes to call and depend on. Therefore, they should be:</p>\n<ul>\n<li>Explicitly identified as such. In Python, that just means <em>not</em> having the <code>_</code> prefix.</li>\n<li>Be more about <em>what</em> than <em>how</em>. Remember to trust your objects.</li>\n<li>Have descriptive names that won't be subject to change, as much as possible.</li>\n<li>Prefer keyword arguments.</li>\n</ul>\n<h2 id=\"honor-the-public-interfaces-of-others\" tabindex=\"-1\">Honor the Public Interfaces of Others <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Basically, avoid as much as possible depending on private methods of other classes! In some languages this isn't an <em>option</em>, but Python of course does not prevent you from calling a method just because it was prefixed with the underscore.</p>\n<p>Still, all sorts of alarm bells should be going off in your head if you ever feel tempted to invoke such a &quot;private&quot; method. The person who wrote that class's interface decided to mark that method as private for a reason: It is considered an internal detail of the class, subject to change at a whim, with no promises made to preserve the private method.</p>\n<p>Chances are, when you find yourself calling a private method, that you're telling a class <em>how</em> to do something rather than asking it for <em>what</em> you want done. Rethink your design!</p>\n<p>If you are convinced that it absolutely cannot be avoided to call a private method, isolate this dangerous dependency from the rest of your code base so that the private method is referenced from only one place, instead of all over your application.</p>\n<h2 id=\"minimize-context\" tabindex=\"-1\">Minimize Context <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>As discussed above, a class's context is the set of other classes and things that are required to be in place before a class can actually do its job. Smaller is better. In terms of a public interface, then, this means providing public methods that allows senders to get what they want without having to spell out the steps needed to get there.</p>\n<p>Basically, if you don't want your class to be micro-managed by other classes, it is your job to provide methods that represent high-level results instead of low-level actions.</p>\n<p>If you have to use someone else's class with a poor public interface, you should also consider putting in the work to wrap the bad interface into a class or method that provides a better interface.</p>\n<h1 id=\"the-law-of-demeter\" tabindex=\"-1\">The Law of Demeter <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h1>\n<p>I have talked about this before on this site so I won't go into too much detail again. I like the author's nuanced approach to the law so I will comment on that a bit.</p>\n<p>The Law of Demeter, in short, says to avoid <em>train wrecks</em> of long chains of methods. But there are subtleties to conisder.</p>\n<h2 id=\"consequences-of-violations\" tabindex=\"-1\">Consequences of Violations <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Whenever someone states that there's a law you shouldn't violate, a natural question to arise is: &quot;Or else?&quot;.</p>\n<ul>\n<li>A long message chain increases coupling between distant objects. Ask yourself if that coupling is appropriate and unavoidable.</li>\n<li>Depending on a long message chain increases an object's <em>context</em>: More things need to be correctly in place, making reuse and testing cumborsome!</li>\n</ul>\n<p>There's a few different <em>types</em> of message chains, and the law's importance depends on that type.</p>\n<ul>\n<li>You could be retrieving a <em>stable attribute</em> via some intermediate objects. In this case, balance the cost of removing the violation against the likelihood of this chain breaking.</li>\n<li>You could be invoking distant behavior. This is most likely a situation where you are telling <em>how</em> rather than <em>what</em>, and hints at a deficient public interface. More on this later.</li>\n<li>You could be chaining together methods that have the same return type; often called a <em>fluid interface</em>. In this case, all is fine, as the Law of Demeter only concerns method chains with different objects along the chain.</li>\n</ul>\n<h2 id=\"avoiding-violations\" tabindex=\"-1\">Avoiding Violations <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>Sometimes when the Law of Demeter is discussed, <em>delegation</em> is sold as the way to avoid the violation:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_something</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token keyword\">return</span> some_object\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\n<span class=\"token comment\"># Some code:</span>\nA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Law of Demeter violation</span></code></pre>\n<p>The idea of delegation is that we move the message chain into the classes:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_something</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token keyword\">return</span> some_object\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>get_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># unchanged</span>\n\t\n<span class=\"token comment\"># Some code:</span>\nA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Hah! No Law of Demeter violation!</span></code></pre>\n<p>At times, this can be the appropriate course of action, but pay attention! You might still be violating the law <em>in spirit</em> if not in letter. Thinking back to our discussion about messages and their appropriate senders and receivers, does it <em>make sense</em> for <code>A</code> to receive this particular <code>do_something</code> message?</p>\n<h2 id=\"listening-to-demeter\" tabindex=\"-1\">Listening to Demeter <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-24-poodr-chapter4/\">#</a></h2>\n<p>What the Law of Demeter <em>really</em> wants to tell us is that we are either missing objects, or methods, that would allow our objects to communicate in a more useful way! According to the author, these <em>train wrecks</em> happen if we focus too much on the objects we already have: This leads us to chain method calls together to assemble some desired behavior. If instead we focus on the <em>messages</em> that we <em>should</em> be sending, we will discover which objects need to receive them:</p>\n<p>In the preceding examples, we discussed why it's bad if one class tells another class in too much detail exactly what to do. Even worse, then, is if we have one class that tells another class to tell another class exactly what to do.</p>\n",
			"date_published": "2020-11-24T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/",
			"url": "https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 3",
			"content_html": "<p>This is the third post in my book review / book notes series about &quot;Practical Object Oriented Design&quot; by Sandi Metz. (https://www.poodr.com/)</p>\n<p>The previous chapter was focused on a single class, and how each class should have one single responsibility. If you design your classes in this way, then obviously any complex behavior must be the result of classes <em>collaborating</em>. This need for collaboration introduces <em>dependencies</em> between the classes, and the job of good design is to manage these dependencies in the best possible way.</p>\n<p>Basically, if you ask a class to do something, there's three ways this can happen:</p>\n<ol>\n<li>The expected behavior is implemented by the class itself. (See last chapter)</li>\n<li>The class <em>inherits</em> the behavior from another class. (Discussed in a subsequent chapter)</li>\n<li>The class <em>delegates</em> the behavior to another class. This is what we talk about in this chapter</li>\n</ol>\n<h1 id=\"understanding-dependencies\" tabindex=\"-1\">Understanding Dependencies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h1>\n<p>As mentioned, collaboration introduces dependencies. We say that A depends on B if A might have to change when B changes. Consider this abstract example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tjob_helper <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tsome_intermediate_result <span class=\"token operator\">=</span> job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>Let us list all the ways in which class A depends on class B. Class A <strong>knows</strong></p>\n<ul>\n<li>The name of the class B, and how to create a new instance of it.</li>\n<li>The name of the method it needs to call (i.e. the name of the message to send to class B).</li>\n<li>The arguments required by that message.</li>\n<li>The order of those arguments.</li>\n</ul>\n<p>Some of these dependencies are inevitable. But many are not! And you'd be surprised!</p>\n<p>Good Design: Manage dependencies so that each class has fewest possible. <em>Just</em> enough to do its job and nothing more.</p>\n<h2 id=\"coupling-between-objects-cbo\" tabindex=\"-1\">Coupling Between Objects (CBO) <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h2>\n<p>A dependency between classes A and B <em>couples</em> them to each other. The more tightly coupled, the more it's basically one entity. That limits reuse, and makes change harder, because now it's spread over more than just one class. In the example above, we cannot reuse <code>A</code> without also bringing <code>B</code> along for the ride.</p>\n<p>Sometimes, this is not a big deal. For example, a given class might bring along with it a number of custom-defined exception classes, like <code>CouldNotDoMyJobException</code>.</p>\n<p>More often than not though, strong coupling is <em>not</em> inevitable. Below we will see some examples and techniques for addressing this.</p>\n<h2 id=\"other-dependencies\" tabindex=\"-1\">Other Dependencies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h2>\n<p>A quick aside that other chapters will deal with certain other types of dependencies. Just a quick overview:</p>\n<ul>\n<li>Law of Demeter: Imagine if one object knows another who knows another who knows something. This dependency on a complete <em>chain</em> of objects knowing each other is fragile and best avoided.</li>\n<li>Test-to-code coupling! Another type of dependency. Learn about writing good, cost-effective tests that aren't fragile! (Chapter 9)</li>\n</ul>\n<h1 id=\"writing-loosely-coupled-code\" tabindex=\"-1\">Writing Loosely Coupled Code <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h1>\n<p>Back to the four original examples of couplings.</p>\n<p>The author describes dependencies as <em>little dots of glue</em> where the various classes neatly fit together. But if you have too much glue, everything devolves into one big lumpy mess.</p>\n<p>We'll look now into specific techniques that address the four dependencies we mentioned above.</p>\n<h2 id=\"inject-dependencies\" tabindex=\"-1\">Inject Dependencies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h2>\n<p>So in our toy exmaple, class A knows the name of class B. That is a dependency. If we change the name of class B, we have to update it in class A.</p>\n<p>Now what's the big deal with that? There's simple search-and-replace functionality, and there's modern IDEs with refactoring support. So really the mere name itself isn't the problem here.</p>\n<p>The real problem is that we are hard-coding the creation of instances of class B. Class A has some responsibility (<code>do_your_job</code>) that it cannot completely fulfill on its own. It needs to collaborate with another class, and in the current code version, it decides to <em>only</em> collaborate with instances of class B. The author calls this an <em>unjustified attachment to type</em>. Ultimately, we don't care about the name of the class, or even its exact type. We care about sending it the <code>process(arg1, arg2)</code> message!</p>\n<p>The simplest way to deal with this problem has the fancy name of <em>dependency injection</em>:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> job_helper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>job_helper <span class=\"token operator\">=</span> job_helper\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tsome_intermediate_result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>Here we decide that it's not the job of class A to know how to <em>make</em> a <code>job_helper</code>. It needs one to collaborate with, so we pass it in. The example above <em>injects</em> the <code>job_helper</code> dependency in the class's <code>__init__</code>, but we could also consider passing it in at the method level, as in <code>do_your_job(self, arg1, arg2, job_helper)</code>.</p>\n<p>Of course <em>somewhere</em> in our program we will have to create an instance of a class that responds to the <code>process</code> message, which might very well be an instance of class B. But we have decided that knowing what class to instantiate, and how, is not the job of class A.</p>\n<p>Writing your code this way also makes it easier to write unit tests for your code! In the previous version, testing class A without also testing class B would be a bit tricky. At least in Python we can use &quot;monkey patching&quot; to mock out class B. But it is much cleaner and easier if we can just pass in either a mock or a dummy version of a <code>job_helper</code> directly. More on testing will come in a later chapter.</p>\n<p>Maybe at this point I will mention one additional technique, or pattern: Sometimes it is not enough to inject an instance of a class to collaborate with. Imagine our class A needed to be able to create new instances of the <code>job_helper</code>. How can it possibly do that without knowing the name of the class it needs to create? The answer is: Through a <em>factory</em>. Instead of passing in a <code>job_helper</code> into the <code>__init__</code>, we would pass in a <code>job_helper_factory</code>. Then, whenever class A would need to get its hands on a new instance of a job helper, it could call something like <code>job_helper_factory.make_new_job_helper()</code>. The knowledge of what concrete class to instantiate is completely contained within that factory class.</p>\n<p>To recap: Realize that creating instances of a class can be seen as a <em>responsibility</em> that may or may not belong into your class. If it doesn't, use dependency injection to provide your class with its dependencies.</p>\n<h2 id=\"isolate-dependencies\" tabindex=\"-1\">Isolate Dependencies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h2>\n<p>Here the author briefly addresses what you could do if you don't have full control over the codebase <em>or</em> just not enough time to complete get rid of all the unnecessary dependencies right now.</p>\n<p>If that's the case, you should at least <em>isolate</em> them:</p>\n<h3 id=\"isolate-instance-creation\" tabindex=\"-1\">Isolate Instance Creation <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>In our <code>class A</code> example above, let's say we cannot move creation of class <code>B</code> to some outside part. Then at lest we should <em>isolate</em> this creation, maybe like so:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_new_job_helper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tjob_helper <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_new_job_helper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tsome_intermediate_result <span class=\"token operator\">=</span> job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>Assuming that in a more complex example, creations of <code>B</code> might be sprinkled all throughout class A's methods, moving that creation to exactly one method isolates this dependency and makes it explicit: Reading the code of class A, we immediately see that it explicitly depends on class B. The dependency is not hidden deep in the belly of some method. This helps us maintain the code, and also is a great reminder to us to consider refactoring the code further, to get rid of that dependency.</p>\n<h3 id=\"isolate-vulnerable-external-messages\" tabindex=\"-1\">Isolate Vulnerable External Messages <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>Imagine in our simple example that <code>job_helper.process</code> was called in a lot of places, or called deep inside an internal method. <em>If</em>, in the current phase of our design and coding process, we reasonably expect that this <code>process</code> message might change, it is a good idea to <em>isolate</em> this message in a separate method:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_new_job_helper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>get_new_job_helper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tsome_intermediate_result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>If that whole job-helper and process code happened in multiple places of our code, extracting it into its own method is a good idea anyway, due to the &quot;Don't Repeat Yourself&quot; principle. But even if it only happens in exactly one place, it might still be a good idea to extract it, to move the interesting bits out from the depths of an internal method, so that the dependency becomes explicit and obvious.</p>\n<h2 id=\"remove-argument-order-dependencies\" tabindex=\"-1\">Remove Argument-Order Dependencies <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h2>\n<p>Briefly, knowing in which <em>order</em> to pass in arguments is <em>also</em> a dependency, and one that can make it hard to later change a method's signature by adding new arguments. Especially early on in design, your methods' signatures will probably change a lot, so it makes sense to try and not depend on this order.</p>\n<p>Luckily, this is very eason in Python by using keyword arguments. You don't even have to change how to define the method itself, just how you call it.</p>\n<p>When using keyword arguments, you trade one dependency on another: Instead of depending on the order of arguments, you now depend on the <em>names</em> of the arguments. So we don't really reduce the number of dependencies when using keyword arguments. Is it still worth it? Yes! Not all dependencies are equal. Some are better than others. Argument <em>names</em> are more <em>stable</em> and more <em>explicit</em> than argument order. If you have to depend on <em>something</em>, try to depend on something that's less likely to change and try to depend on it in a way that's explicit.</p>\n<h3 id=\"kwargs-in-python\" tabindex=\"-1\">kwargs in Python <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>One extra thought, a short excursion, at this point: Python allows a method to accept <em>any</em> keyword argument via the <code>**kwargs</code> syntax: <code>def function(an_argument, **kwargs)</code> will store any keyword arguments\npassed when calling <code>function</code> in the dictionary <code>kwargs</code>.</p>\n<p>I admit that I am <em>not</em> a big fan of this, because it <em>obscures</em> what arguments we are expecting. A caller would have to read the docstring (which might be out of date!) or, worse, dive into the body of the function to discern which keyword arguments there are.</p>\n<p>Often you see this construct when one function takes a few keywords out of the dict (via <code>pop</code>) and then passes the rest along to another function it calls. Almost always when I see this, there is a violation of the Single Responsibility Principle, or a mis-managed dependency. I believe that in the majority of cases, a better design can eliminate the need for using the catch-all <code>**kwargs</code>.</p>\n<p>One common use-case (and anti-pattern, really) for kwargs occurs in mismatched class hierarchies. We talk about inheritance later, but assuming that you are familiar with the basic concept, you sometimes see a class hierarchy where the various child classes, inheriting from the same base class, want slightly different signatures for their methods:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">some_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildA</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">some_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildB</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">some_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t</code></pre>\n<p>The justification here for using <code>kwargs</code> is that, at least syntactically, you can call <code>some_function</code> for each of these three classes with the same arguments. The problem is that, if you really require different signatures for the various classes, they shouldn't be related via inheritance in the first place! The whole idea behind inheritance and polymorphism is that someone sending the <code>some_function</code> method does not, and <em>should not</em>, need to know whether the recipient is <code>Base</code>, <code>ChildA</code>, or <code>ChildB</code>. Code like the one above <em>begs</em> for the anti-pattern of the type switch:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>someclass<span class=\"token punctuation\">,</span> ChildA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tsomeclass<span class=\"token punctuation\">.</span>some_function<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> special_argument_for_child_a<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>someclass<span class=\"token punctuation\">,</span> ChildB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tsomeclass<span class=\"token punctuation\">.</span>some_function<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> special_argument_for_child_b<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Seriously reconsider your design at this point. Evaluate whether inheritance is what you want, and explore how you could rearrange the code such that the signatures of inherited methods remain the same.</p>\n<h1 id=\"managing-dependency-direction\" tabindex=\"-1\">Managing Dependency Direction <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h1>\n<p>In a lot of cases, and certainly in the example above, the dependency has a specific direction: Class A had a dependency on class B, but class B did <em>not</em> have a dependency on class A. It is however often possible to rearrange your code and your general logic in such a way that, instead, B would depend on A.</p>\n<p>Let's recall the old version of the toy example a bit:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tjob_helper <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tsome_intermediate_result <span class=\"token operator\">=</span> job_helper<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_some_internal_calculations<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span></code></pre>\n<p>If we decide to remove the responsibility of &quot;doing the job&quot; from class A to class B, we could have a result like this:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">help_with_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> intermediate_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>more_processing<span class=\"token punctuation\">(</span>intermediate_result<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">do_your_job</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tsome_intermediate_result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n\t\thelper <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> A<span class=\"token punctuation\">.</span>help_with_job<span class=\"token punctuation\">(</span>some_intermediate_result<span class=\"token punctuation\">)</span></code></pre>\n<p>In this example, class B has a dependency on class A, and A does not depend on B anymore.</p>\n<p>Note that now of course we'd look into whether or not we should <em>inject</em> the instance of class A instead of creating it right here inside of class B, but that is not the focus of this section.</p>\n<p>Rather, the <em>ability</em> to change the direction of dependencies raises the question: Which direction is the right one? Does it matter?</p>\n<h3 id=\"choosing-dependency-direction\" tabindex=\"-1\">Choosing Dependency Direction <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>The author says it best: You should depend on things that change less often than you do!</p>\n<p>This sounds simple, but it can have a profound impact on how you think about your code.</p>\n<p>Here, the author lists &quot;three simple truths about code&quot;</p>\n<ul>\n<li>Some classes more likely to change than others</li>\n<li>Concrete classes are more likely to change than abstract ones</li>\n<li>Changing a class that has many dependents will result in widespread consequences</li>\n</ul>\n<p>The first point should be self-evident. The classes at the edge of our current development will change a lot. Classes at the core of a standard library will change rarely. In between is a wide spectrum. The well-understood core of our own application might be relatively stable but still change more often than the standard library.</p>\n<p>The second point might be more subtle. An abstract class is one that either only defines an interface without implementing it, or a class that fulfills a more abstract responsibility. Maybe it is a class that, concretely, facilitates messages between other, more concrete classes.</p>\n<p>The third point should be clear as well: All else being equal, changing a class on which a lot of other classes depends will always be messier than changing a class on which few other classes depend.</p>\n<h3 id=\"recognizing-concretions-and-abstractions\" tabindex=\"-1\">Recognizing Concretions and Abstractions <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>In this section we get a nice discussion of &quot;concrete&quot; versus &quot;abstract&quot;. We have already used this concept: When we used dependency injection in our very first example in this chapter, we removed the dependency on something <em>concrete</em> (class B and how to create it) to something\nmore <em>abstract</em>: The idea that there's certain objects, whatever they are and wherever they come from, that you can send the <code>process</code> message.</p>\n<p>In languages with strict typing (Java, C++/C#), we would have to explicitly define an\n<em>interface</em>: An abstract class that expresses the abstract concept of understanding the <code>process</code> message:</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IJobHelper</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeReturnType</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeType</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SomeOtherType</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>and then make it clear that our class A now expects a <code>job_helper</code> passed into its constructor, with the type <code>IJobHelper</code>.</p>\n<p>In Python (and other dynamically typed languages such as Ruby) we do not have to explicitly declare an interface. Any object that happens to respond to the <code>process</code> message can be used. This is also called <em>Duck typing</em>, after the phrase &quot;If it walks like a duck and quacks like a duck, it's a duck!&quot;</p>\n<p>Either way, depending on abstractions is more <em>stable</em> than depending on concretions, simply because a concretion is an &quot;abstraction with the details filled in&quot;.</p>\n<ul>\n<li>E.g. depending on &quot;I'm being passed an object that understand this method&quot; is more abstract than creating concrete instance and sending arguments in concrete order...</li>\n<li>This is where interfaces come in, either explicit (strictly-typed languages) or implicit (Duck-typing)</li>\n</ul>\n<h3 id=\"avoiding-dependent-laden-classes\" tabindex=\"-1\">Avoiding Dependent-Laden Classes <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>Here, the author adds an important subtle point to the way we should think about classes with many dependents: It's obvious that, if you change a dependent-laden class, you'll get lots of ripple effects that might require related changes.\nBut what that means, in practice, is that even <em>having</em> a dependent-laden class in the first place is bad, because you will be <em>very</em> reluctant to touch it.</p>\n<h3 id=\"finding-the-dependencies-that-matter\" tabindex=\"-1\">Finding the Dependencies that Matter <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h3>\n<p>This is a really cool section that drives home all the points made above.</p>\n<p>Consider all your code, all your classes, and put them in a scatter plot. The x-axis\nrepresents how many dependents it has. The y-axis represents how likely it is to change.\nThat leaves us with four quadrants that we can discuss here:</p>\n<p><strong>The Abstract Zone:</strong>\nThis zone represents classes that rarely change but that have <em>lots</em> of dependents.\nTypically this zone includes abstract classes and interfaces (either the explicit ones in languages that need them, or the ones implicitly defined via duck typing).</p>\n<p>This is a <em>good</em> zone: If we accept that classes <em>need</em> to depend on other classes to get anything done, then we want these dependencies to cluster around classes that, at least, rarely change, which <em>probably</em> means that these classes are more on the abstract side.</p>\n<p><strong>The Concrete Zone:</strong>\nNot called that way in the book, but I like the name as it contrasts with the Abstract Zone. This quadrant has those classes that are quite likely to change but that have few or no dependents. This is also a <em>good</em> zone: Through our thoughtful design, we have reduced the impact of the likely changes. How did we get rid of the dependents of the concrete classes? By extracting the abstract ideas behind the concrete classes and movign the dependents over to those abstractions!</p>\n<p><strong>The Neutral Zone:</strong>\nClasses that are neither likely to change nor cause a lot of trouble if they were to change. Certainly nice to have, but there always has to be a certain amount of change and of dependency in our application, so the interesting stuff happens in the previous two zones.</p>\n<p><strong>The Danger Zone:</strong>\nFinally, we have the quadrant of classes that are likely to change <em>and</em> that have many dependents. This is the place where coding horror and spaghetti code live: Frequent changes that break lots of things make programming a nightmare. Be aware when you run into a class like this and consider if you can tackle it via reversing the direction of dependency, or extracting an abstract interface.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-11-18-poodr-chapter-3/\">#</a></h1>\n<p>Not much to add to what the author already summarises so I won't plagiarize his excellent summary :)</p>\n",
			"date_published": "2020-11-18T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/",
			"url": "https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 2",
			"content_html": "<p>This is the second post in my book review / book notes series about &quot;Practical Object Oriented Design&quot; by Sandi Metz. (https://www.poodr.com/)</p>\n<p>In the last chapter we learned that design is all about writing code that is easy to change.</p>\n<p>In this chapter we will learn about one important principle that gets right to the core of this principle: Designing classes with a <strong>single responsibility</strong>.</p>\n<p>What makes writing good classes so tricky is the great fluidity they afford. There is only a handful ways to write your for-loops and if-clauses such that they actually perform the algorithm you want them to. There are a myriad ways to arrange functionality across classes.</p>\n<p>Some of the questions that arise are:</p>\n<ul>\n<li>What are your classes, i.e. by what concepts is code organized in your program?</li>\n<li>What behavior will they implement? What are the class's responsibilities?</li>\n<li>What does one class need to know about another class, i.e. what are the dependencies?</li>\n<li>What internal data does a class reveal to other classes, what is kept hidden?</li>\n</ul>\n<p>As was discussed in the previous chapter, there's really two main requirements that dictate what this arrangement should be:</p>\n<ul>\n<li>The application should work <em>right now</em> and do what it's supposed to do.</li>\n<li>The application should also be <em>easy to change later</em>.</li>\n</ul>\n<p>These requirements can be at odds sometimes, especially when a deadline looms. But here is a great quote from the book:</p>\n<blockquote>\n<p>Your application needs to work right now just once; it must be easy to change forever.</p>\n</blockquote>\n<h1 id=\"what-does-easy-to-change-mean\" tabindex=\"-1\">What does Easy to Change mean? <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h1>\n<p>Okay, so we agree that code should be easy to change. But what does that concretely mean, and how do we create code that actually <em>is</em> easy to change? Here I want to dig a bit deeper into the author's definition.</p>\n<h2 id=\"transparent\" tabindex=\"-1\">Transparent <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>In complicated, tangled code (so-called spaghetti code), a seemingly benign change in one corner of the program has unexpected and detrimental consequences in a completely unrelated corner of the program. Often this happens when code depends on obscure implementation details and thus becomes fragile.</p>\n<p>Code that is easy to change should therefore be <strong>transparent</strong>. You should be able to look at a proposed change and see what it will do to the code immediately around it, but also to code far away.</p>\n<h2 id=\"reasonable\" tabindex=\"-1\">Reasonable <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>The author asserts that small changes in requirements should require correspondingly small changes in code. This can be a bit tricky in scientific scenarios (see, e.g., https://xkcd.com/1425/). <em>Small</em> is thus a somewhat vague term and what counts as a small change in requirements is not always obvious.</p>\n<p>However, what we can demand is that <em>if</em> a small change in requirements needs big changes in code, this should be due entirely to the nature of the changes and not due to the nature of the way the code is arranged. The new or adjusted feature might require a lot of coding, but once that is done we should be able to neatly drop it into place without much fuss.</p>\n<h2 id=\"usable\" tabindex=\"-1\">Usable <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>The code that already exists should be easy to re-use. Often, new requirements are just small tweaks or recombinations of existing behavior. The better the code is designed, the easier it is to get at these pieces and combine them in useful ways.</p>\n<h2 id=\"exemplary\" tabindex=\"-1\">Exemplary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>Here the author says:</p>\n<blockquote>\n<p>the easiest way to make a change is to add code that in itself is easy to change</p>\n</blockquote>\n<p>So basically, write code that is good in a way that it inspires other developers (or future-you) to <em>also</em> write good code, i.e. code that is easy to change.</p>\n<hr>\n<p>These code qualities spell out &quot;TRUE&quot;. Code that is TRUE will be easy to change and adapt to new requirements. So far so good in that we now have a few more concrete definitions to attach to our idea of &quot;easy to change&quot; code. That still leaves the question of <em>how</em> we arrange our code such that it is true.</p>\n<p>Each design principle will touch on all of the TRUE qualities. The very first step, according to the author, is to ensure that your code adheres to the <strong>Single Responsibility Principle</strong></p>\n<h1 id=\"creating-classes-that-have-a-single-responsibility\" tabindex=\"-1\">Creating Classes That Have a Single Responsibility <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h1>\n<p>Let's put aside for a moment the question of what exactly counts as a responsibility and just accept the fact that the stuff a class does fulfills one or more responsibilities.</p>\n<p>The Single Responsibility Principle (SRP) then states that a class should have a single responsibility. You might say each class should do one small useful thing and not more.</p>\n<p>Now how does that help in making your classes TRUE? Let's have a look.</p>\n<h2 id=\"transparent-1\" tabindex=\"-1\">Transparent <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>A change in a class with a single responsibility will affect how that responsibility is handled, and nothing else. This limits the unexpected consequences of a change, though it is not a silver bullet. You can still write badly tangled code that adheres to the SRP.</p>\n<h2 id=\"reasonable-1\" tabindex=\"-1\">Reasonable <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>If you have a bunch of responsibilities and a bunch of classes, and each class has exactly one responsibility, it follows mathematically that each responsibility is fulfilled by exactly one class.</p>\n<p>So if you want to make a small change to your application, you will only be dealing with a small number of behaviors that you need changed, and that means you will only be modifying a small number of classes. The smaller the change, the fewer classes will be affected. This is great! Compare this to spaghetti code where a seemingly small change requires each and every class to be changed.</p>\n<h2 id=\"usable-1\" tabindex=\"-1\">Usable <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>This quality most clearly benefits from adhering to the SRP. If each class has exactly one responsibility, it is much easier to re-use it in a different context than if it was carrying with it a bunch of responsibilities. Let me use a concrete example:</p>\n<p>I was reviewing code I had written some time ago for a project and there was a class that performed a certain data transformation step (&quot;raw&quot; problem input to a specific formulation of the problem that would then be passed on to a solver). But it <em>also</em> performed the loading from file of that raw problem input. Now I wanted to re-use the problem transformation capability in a new context but that was very awkward, because that whole file-loading stuff wanted to come along for the ride. And it wasn't even &quot;just there&quot; and could be ignored. Rather, the way you created an instance of that whole problem-loader-and-transformer was to pass in the filename of the raw problem data. No way for me to say &quot;Wait, I already have the data loaded, I just want to make that transformer class!&quot;</p>\n<p>This is the case more often that not: If a class has more than one responsibility, they will be strongly entangled. Because if they weren't, you'd probably already have split everything neatly into two classes!</p>\n<h1 id=\"but-what-are-responsibilities\" tabindex=\"-1\">But What Are Responsibilities? <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h1>\n<p>We have seen why a well-designed class has only a single responsibility. But what counts as a responsibility? If we want to be narrow and nitpicky, then every method implemented by a class is a responsibility: &quot;Respond to that message&quot;. By that logic, a class should have only one (public) method. Clearly that cannot be right.</p>\n<p>On the other hand, if we pick our idea of responsibility too broadly, the whole concept becomes meaningless: &quot;My class is responsible for life, the universe, and all the rest.&quot;</p>\n<p>So let's try and come up with a better concept of responsibility. A class's responsibilities are fulfilled by the class's methods, where each method implements a certain <em>behavior</em>. These behaviors should form a <em>cohesive</em> set, all aligned with a single, small responsibility.</p>\n<p>Since so much hinges on the class's methods, let's go on a quick detour about them</p>\n<h2 id=\"the-single-responsibility-principle-for-methods\" tabindex=\"-1\">The Single Responsibility Principle for Methods <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>Both in the &quot;Practical Object Oriented Programming&quot; and in the classic &quot;Clean Code&quot; by Robert &quot;Uncle Bob&quot; Martin the authors discuss the importance of writing functions (and thus methods) that do <em>one thing</em>, not more. The same reasons apply as for classes: Doing more than one thing makes everything that much more complicated, entangled, and less useful.</p>\n<p>I highly recommend checking out the chapter on functions in &quot;Clean Code&quot; and internalizing these principles. It is an immediate win for your code quality if you start writing shorter, more focused function that do one thing, and one thing only. Bonus points if that one thing is clearly discernible from the function's name.</p>\n<p>Now while writing functions that way is a great idea in its own right, it becomes especially important when you want your class's methods to guide you to a better design: If each method does <em>one</em> clearly defined thing, then you can easily tell whether your class fulfills more than one responsibility or not. If instead lots of behavior is crammed into a single method, it is hard to tell whether the class with that method is fulfilling a single responsibility or not.</p>\n<h2 id=\"some-tests-for-methods-and-where-they-belong\" tabindex=\"-1\">Some Tests for Methods and Where They Belong <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>Once you have made sure that the methods itself are well-written with a single responsibility per method, you can use a few tests to see whether the method indeed belongs in the class it is currently in:</p>\n<h3 id=\"the-interrogation-test\" tabindex=\"-1\">The &quot;Interrogation&quot; Test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>If we view methods as &quot;messages&quot; that an object responds to, you can view them as questions or commands. So pretend that your class is a person and, for each of its methods, make that command or ask that question.</p>\n<p>As a concrete example, I remember in one of my projects we had a class <code>SchedulingProblem</code> that was meant to represent the &quot;Problem&quot; from the end user's point of view. During a code review, I found that someone had added a <code>get_number_of_processors()</code> method to it, for the purpose of parallelizing some calculation. I could certainly see how it was convenient to add that method there. But using the interrogation test, &quot;Dear Mr. Scheduling Problem, how many processors do you have?&quot; doesn't quite make sense.</p>\n<h3 id=\"the-summary-test\" tabindex=\"-1\">The &quot;Summary&quot; Test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>Try summarizing what the class does, or is responsible for, in a single sentence or maybe paragraph. Can you do it without using &quot;and&quot;/&quot;or&quot;?</p>\n<p>To quote from the book, if you have to use &quot;and&quot; there's a chance your class is responsible for two things. If you have to use &quot;or&quot;, chances are not only is your class responsible for two things, these two things aren't even that closely related!</p>\n<h3 id=\"the-cohesion-test\" tabindex=\"-1\">The Cohesion Test <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>Cohesion, in the context of Object Oriented Design, measures how much each method of a class operates on that class's attributes. Consider this, admittedly, very tiny example:</p>\n<pre><code>class Stack:\n  def __init__(self):\n    self._internal_list = []\n\t\n  def pop(self):\n    value = self._internal_list[-1]\n\tdel self._internal_list[-1]\n\t\n  def push(self, value):\n    self._internal_list.append(value)\n</code></pre>\n<p>Each method of this class interacts with the class's only attribute. Such a class would be considered maximally cohesive. It is neither required nor desirable to always achieve 100% cohesion in a real-world class. However, low cohesion often points at potential problems.</p>\n<p>Often you will find that you can group the class attributes together based on which subset of methods operates on them. This is a clear sign that your class wants to be broken up into two classes. Sometimes it is a clean break where one group of methods only accesses one group of attributes. But even if the break isn't clean, you can still improve the design by going from one class to two classes that now might need to share some information via methods.</p>\n<h2 id=\"when-to-make-design-decisions\" tabindex=\"-1\">When to Make Design Decisions <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>This is a great section in the book. Especially at the beginning of a programming project, or at the start of adding a whole new set of functionality, you might end up with a class where you feel that its design isn't quite right. But you also have no clue how to improve it because so little is known about how it will change in the future.</p>\n<p>At this point, you should weight the cost of trying (guessing, really) at the perfect design for a potential future change versus the cost of doing nothing now and leaving the decision for later, when more information arrives. The whole point of good design is to reduce the cost of future changes; so if doing &quot;something&quot; right now doesn't help reduce that cost, just don't bother.</p>\n<p>The only small issue then is that others might look at your currently imperfect class and think it's &quot;okay&quot; to code in that style. So maybe you <em>should</em> improve the design right now? But then again, we lack the good information as to how.</p>\n<h1 id=\"writing-code-that-embraces-change\" tabindex=\"-1\">Writing Code That Embraces Change <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h1>\n<p>This section steps away from the overall &quot;single responsibility principle&quot; for a moment to discuss how you can solve the dilemma of having to write changeable code in a way that doesn't already pressupose <em>what</em> the change will be.</p>\n<p>I will only briefly comment on them. The description are fine as they are, but there's a twist in Python.</p>\n<h2 id=\"depend-on-behavior-not-data\" tabindex=\"-1\">Depend on Behavior, Not Data <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h2>\n<p>To summarize:</p>\n<ul>\n<li>Behavior is captured in methods; it's in the <em>messages</em> you send an object.</li>\n<li>If your class has a single responsibility, every behavior is contained in one, and only one, place</li>\n<li>Thus if you depend on behavior, your code can tolerate change because there's exactly one place to look for a particular behavior</li>\n<li>Classes also contain <em>data</em>, contained in the <em>instance variables</em>. Don't depend on data!</li>\n</ul>\n<p>Why not depend on data? Because that &quot;leaks out&quot; the internal details of your class and means that you cannot change how the class deals with that data to produce behavior; other classes have taken it on themselves to add behavior to that data.</p>\n<h3 id=\"hide-instance-variables\" tabindex=\"-1\">Hide Instance Variables <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>The way in most programming languages to achieve this <em>encapsulation</em> is to declare all instance variables as <em>private</em> and only provide access via getter/setter functions (if at all!).</p>\n<p>In Python, things work a bit differently. First, there are no <em>true</em> private instance attributes. It is merely accepted convention that attributes (and methods) of a class that begin with an underscore are <em>considered</em> private implementation details and <em>should not</em> be relied upon.</p>\n<p>When it comes to public attributes, Python has a nice feature in the <code>@property</code> decorator that allows a seamless switch from attribute to getter/setter. Consider this simple example:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">compute_circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>pi</code></pre>\n<p>Someone who uses the circle class can happily access (and set) the radius by directly accessing the attribute: <code>my_circle.radius = 3</code></p>\n<p>What if, for whatever reason, we want to change the way the circle is internally handled, and store the diameter instead of the radius? In many other programming languages, the fact that external code directly refers to <code>radius</code> means we cannot easily change it to something like <code>get_radius()</code>. In Python, however, we can just change it from an attribute to a property:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>diameter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius\n\t\t\n\t<span class=\"token decorator annotation punctuation\">@property</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>diameter <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\t\n\t<span class=\"token decorator annotation punctuation\">@radius<span class=\"token punctuation\">.</span>setter</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>diameter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> new_radius</code></pre>\n<p>So when should we use these properties and when should we use functions with explicit names like <code>get_radius()</code>? Ideally, our class structure allows us to mostly rely on invoking behavior through methods, so we should not be dealing with too many attributes to begin with! Our first instinct should always be to hide data and let the classes work it out via methods that invoke behavior. Tell, don't ask! If it is indeed necessary to expose a class's attributes, we can start with the simple, direct attribute way and change to the property decorator later, if necessary. For <em>complex caluclations</em>, I suggest making explicit that something is being computed or retrieved etc. Something behind a property should be just a simple lookup or conversion!</p>\n<h3 id=\"hide-data-structures\" tabindex=\"-1\">Hide Data Structures <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>Let's talk about DRY. It's another one of these important design principles, and stands for <strong>Don't Repeat Yourself</strong>. Every bit of knowledge should have one definite place where it is defined. Some obvious cases of DRY-violations are lines of code that are copy-pasted instead of being extracted into a function. Some cases are more subtle.</p>\n<p>Consider this class:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeContainerForTimes</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data\n\t\t\n\t<span class=\"token decorator annotation punctuation\">@property</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_data\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">convert_to_minutes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span>\n\t\t\n\t<span class=\"token comment\"># ... lots more methods that explicitly refer item[0] and item[1]</span></code></pre>\n<p>So here we have some class that stores a list of tuples and apparently the first position refers to hours and the second position refers to minutes. And then there's lots of methods in that class who explicitly make use of that arrangement.</p>\n<p>This is a violation of the DRY principle! The fact that &quot;hours are stored in position 0&quot; is a piece of <em>knowledge</em> which, therefore, should have only <em>one</em> place where it is represented, instead of plastered all over the place. Whenever the data structure would change, each piece of code that uses the structure also needs to change, and that goes for internal and external uses of the <code>data</code> array. For example, if we were to expand the code so in addition to hours and minutes it also contains days, we'd probably want to have the days stored at position 0, hours at position 1 and minutes at position 2. Now we'd have to find every use of <code>item[i]</code> and update it so it uses the correct index. There's a big chance we'd introduce bugs that way.</p>\n<p>What's a solution here? Encapsulate the raw data structure in something more descriptive:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> namedtuple\nTime <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeContainerForTimes</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>_times <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_convert_raw_array<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t\n\t<span class=\"token decorator annotation punctuation\">@property</span>\n\t<span class=\"token keyword\">def</span> times<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_times\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">_convert_raw_array</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Time<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> minutes<span class=\"token operator\">=</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">convert_to_minutes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>hours <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>minutes <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>times<span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token comment\"># ... lots more methods that now make reference </span>\n\t<span class=\"token comment\">#     to item.hours and item.minutes</span></code></pre>\n<p>Now the <em>knowledge</em> that <code>item[0]</code> contains hours and <code>item[1]</code> contains minutes is stored in only one place: The <code>_convert_raw_array</code> method. Every other method (even inside the same class) will now refer to the <code>_times</code> list instead of the raw array.</p>\n<p>I'll just quote the book here as it's spot on:</p>\n<blockquote>\n<p>Direct references into complicated structures are confusing, because they obscure what the data really is, and they are a maintenance nightmare, because every reference will need to be changed when the structure of the array changes.</p>\n</blockquote>\n<p>A note about Python: There, we have the built-in <code>dict</code> type which is similar to an array except that keys can be any hashable object. We <em>could</em> have used a <code>dict</code> instead of a <code>namedtuple</code> here, and at least it would have made the structure more clear (we'de be using <code>data[&quot;hours&quot;]</code> and <code>data[&quot;times&quot;]</code>) and extensible.</p>\n<p>It may be a matter of taste, but I prefer the <code>namedtuple</code> here over a solution with <code>dict</code>. I feel that a <code>dict</code> is best used as an &quot;array&quot; with advanced keys. In particular, it is useful where we don't know in advance what the keys are. For our time object, we need <code>hour</code> and <code>minutes</code> and that's it. Declaring a named tuple makes this explicit. It should also have a smaller footprint than a <code>dict</code>.</p>\n<p>An added benefit is that the syntax for item access of the <code>namedtuple</code> makes it easy to later change it to a full-blown class in case we want to add behavior to the <code>Time</code> object.</p>\n<h3 id=\"enforce-single-responsibility-everywhere\" tabindex=\"-1\">Enforce Single Responsibility Everywhere <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>I have already touched upon the points of this subsection in the &quot;Single Responsibiltiy Principle for Methods&quot; section. I cannot emphasize enough how radically transformative your coding becomes once you start <em>radically</em> enforcing this principle and write methods that truly do one thing only!</p>\n<p>Let's recap what the author thinks about these qualities. Methods with single responsibilities have these benefits:</p>\n<ul>\n<li>Expose previously hidden qualities</li>\n</ul>\n<p>I touched on this above; once all your <em>methods</em> have a single responsibility, you can then determine whether your <em>class</em> has a single responsibility simply by looking at the methods.</p>\n<ul>\n<li>Avoid the need for comments</li>\n</ul>\n<p>Another great chapter in Clean Code talks about comments. As a novice programmer, I thought more is better when it comes to comments. I have since learned that comments are often used as deodorant to mask <em>code smells</em>. If you feel like you should write a comment, try and improve the code instead so the comment becomes unnecessary. One such way is to take the code that had the comment and extract it into a single method, with the name of the method replacing the comment.</p>\n<ul>\n<li>Encourage reuse</li>\n</ul>\n<p>If your method combines reading some data <em>and</em> processing the data, the only way to reuse the method is to also read data <em>and</em> processing it. What if you wanted to reuse only the processing part, or the reading part? When you write your small single-responsibility methods, you will create many small methods that form the <em>building blocks</em> for the higher levels of functionality. It is these building blocks that will make your code easy to reuse <em>without</em> copy-pasting.</p>\n<ul>\n<li>Are easy to move to another class</li>\n</ul>\n<p>In the spirit of designing code that is amenable to change, small methods are easier to move to another class than large methods. This encourages you to improve your design, because it lowers the barrier to such refactorings.</p>\n<h3 id=\"nested-classes\" tabindex=\"-1\">Nested Classes <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h3>\n<p>The book chapter closes with a section on isolating behavior inside classes. Basically, if you feel that certain methods do not belong in the class they are currently in, but you don't know yet where they <em>should</em> belong, you can create an <em>internal</em> (or <em>nested</em>) class inside your current class and move them there. Then at least they're not muddying the class, and once you have more information about what design you want, the nested class will be easier to extract.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-30-poodr-chapter-2/\">#</a></h1>\n<p>This was a big chapter and explained one of the foundational principles. At this point it might still be rather abstract. The principles of single responsibility and not repeating yourself should appear agreeable enough, but I hope in subsequent posts to provide more <em>concrete</em> examples of what we might consider to be a responsibility and how to write our classes such they only have one.</p>\n",
			"date_published": "2020-10-30T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/",
			"url": "https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/",
			"title": "Practical Object Oriented Design - Book Notes - Chapter 1",
			"content_html": "<p>This is the first post in what I hope to be a series of posts, discussing my experience and thoughts with reading the excellent book, <a href=\"https://www.poodr.com/\">&quot;Practical Object Oriented Design&quot;</a>, by Sandi Metz. This is mostly so I can internalize the great lessons from the book, and the best way to do that is to try and explain those lessons to others.</p>\n<p>The book itself uses Ruby as the programming language of choice to explore the principles of good object oriented design. My own examples will be from Python as that is what I am using at work.</p>\n<p>Let us now dive right into the first chapter.</p>\n<h1 id=\"what-is-object-oriented-design-all-about\" tabindex=\"-1\">What is Object Oriented Design all About? <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<p>Old-school programming languages like FORTRAN and C are <em>procedural</em> languages. The programs are a set of step-by-step instructions, and these instructions operate on data.</p>\n<p>In object-oriented programming languages, you instead view the world as being made up of objects that interact with each other by <em>sending messages</em>. In technical terms, your objects are described by classes, and sending a message means calling a class's method.</p>\n<p>When attempting object-oriented design (OOD), you need to shift your perspective away from procedures and modules towards these objects and messages. Merely taking procedural code and slapping classes around the functions does <em>not</em> make it object oriented.</p>\n<h1 id=\"what-is-design-good-for-anyway\" tabindex=\"-1\">What is Design Good for Anyway? <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<p>Here is an uplifting quote from the book's first chapter:</p>\n<blockquote>\n<p>The programming techniques that make code a joy to write overlap with those that most efficiently produce software.</p>\n</blockquote>\n<p>So what makes code a joy to write? Code that is clear and logical and easy to work with. In particular, code that is easy to <em>change</em>. A big point of the book, especially given it's subtitle &quot;An Agile Primer&quot;, is that it is guaranteed that your program will have to change. Maybe requirements weren't clear at the start. Maybe the program was a success and now enthusiastic clients are asking for additional features. Whatever the reason, you will need to change your code.</p>\n<p>And if your program is anything but short-lived, the time spent <em>modifying</em> the program is far greater than the time spent on the initial writing.</p>\n<p>So then design is about solving the problem of writing code that is easy to change. It's not about dazzling your coworkers with intricate patterns or architectures.</p>\n<h2 id=\"why-change-is-hard\" tabindex=\"-1\">Why Change is Hard <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h2>\n<p>The book goes on to explain <em>why</em> change is hard and can introduce problems when the code is not designed well:</p>\n<p>Looking at your object-oriented program, you have a bunch of objects that send each other a bunch of messages to produce the desired behaviour. For that to work, your objects need to know certain things about each other: Who to send what message to and in what format?</p>\n<p>While this knowledge is necessary to get any work done, it also creates <em>dependencies</em>. It is these dependencies that stand in the way of change: If class A depends on class B being &quot;just so&quot;, then a change to class B forces a change in class A. Before you know it, these forced changes have rippled through the entire program.</p>\n<p>Good object-oriented design is all about <em>managing</em> these dependencies. We can never completely get rid of them, but by making careful choices about the design we can limit them to the absolute minimum.</p>\n<h2 id=\"a-practical-definition-of-design\" tabindex=\"-1\">A Practical Definition of Design <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h2>\n<p>I remember back in university, a fellow Physics student ask me (because I also took Comp Sci classes) what classes were actually for, since he was convinced you could achieve any conceivable bit of functionality just as well without them. I did not have a good reply back then because, <em>technically</em> he was right. Classes are not so much about providing functionality as they are about organizing that functionality.</p>\n<p>Sandi Metz has a very simple, practical definition of design:</p>\n<blockquote>\n<p>Every application is a collection of code; the code’s arrangement is the design.</p>\n</blockquote>\n<p>As an example of bad design, I remember my first days of learning Visual Basic 6 in high school. You had a nice drag and drop editor for user interfaces, and the control elements like clickable buttons had event-based methods like <code>on_click()</code> that the runtime environment would call for you when you actually clicked the button.</p>\n<p>These event methods were where I put <em>all</em> the application code and business logic of my programs. In terms of functionality, my programs did exactly what I wanted them to do. But when I wanted to change the user interface, I also had to carefully rearrange where the internal workings of the program took place. Truly hard work, and an example of code that's maybe not arranged in the best possible way.</p>\n<p>This example demonstrates that code has two potentially conflicting demands: Obviously, it must solve the problem that it's meant to solve. But it must <em>also</em> be written in such a way that it can easily incorporate future changes.</p>\n<p>Here it is important to make a distinction: Anticipating <em>change</em> is not the same as anticipating <em>one particular future change</em> and then pre-emptively accounting for that anticipated change. We cannot see the future and we cannot guess what additional features or requirements we will face. That is not what design is about. Instead, it is about leaving the code &quot;room to breathe&quot; so that <em>whatever</em> change actually arrives in the future can be easily incorporated.</p>\n<h1 id=\"the-tools-of-design\" tabindex=\"-1\">The Tools of Design <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<p>Next, the author talks about two tools in the kit of a software engineer: Design Principles and Design Patterns. Let's take a look.</p>\n<h2 id=\"design-principles\" tabindex=\"-1\">Design Principles <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h2>\n<p>While design involves judgement calls, tradeoffs, and some subjective assessments, there are certain guiding principles that have emerged and become evident over the years. There is academic evidence that following these principles makes your code better (i.e., easier to change). In the course of the boook, the author will touch on many of them and go in-depth. The most famous principles are:</p>\n<ul>\n<li>SOLID: Single Responsibility, Open-Closed, Liskov-Substitution, Interface Segregation and Dependency Inversion (or Injection)</li>\n<li>DRY (Don't Repeat Yourself)</li>\n<li>Law of Demeter (LoD)</li>\n</ul>\n<p>I won't expand on them here. Stay tuned for more on them, though.</p>\n<h2 id=\"design-patterns\" tabindex=\"-1\">Design Patterns <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h2>\n<p>Some problems in object-oriented design come up time and again, and so the &quot;Gang of Four&quot; (Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides) wrote a book called &quot;Design Patterns&quot; where they present &quot;simple and elegant solutions to specific problems in object-oriented software design&quot;. They have names like Singleton, Factory, Command, Adapter, Decorator, Strategy etc and are a great tool in every programmers toolbox.</p>\n<p><strong>Beware</strong> though: Many novice programmers, myself included, get overzealous when they first learn about patterns. In an attempt to appear sophisticated, they then try and cram patterns into every bit of code no matter how misplaced the pattern actually is. Use the right tool for the job!</p>\n<h1 id=\"the-act-of-design\" tabindex=\"-1\">The Act of Design <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<p>Now the author explains how and when to design, and first explains how design can fail. For that, there's basically two failure modes at the extremes: Too little design, or too much design.</p>\n<p>With too little design, your application quickly devolves into spaghetti code. There's a good chance that every programmer is familiar with this problem, because every programmer started out as a novice who didn't know the least bit about design.</p>\n<p>On the other hand, there's too much design. That's the aforementioned pattern zealot, or someone who wraps every little bit of code in ten layers of abstraction and indirection.</p>\n<p>There's another failure mode: Separating the act of design from the act of programming. Sometimes derisively referred to as &quot;Big Up-Front Design&quot; (BUFD), the problem with it is that it severes the all-important feedback loop between programming and designing. Ideally, your design will evolve incrementally:</p>\n<ul>\n<li>A small program is easy to write and easy to design well</li>\n<li>If you have a program that is designed well, it will be easy to change</li>\n<li>Adding a <em>small</em> change to a well-designed program allows you to arrive at a well-designed slightly bigger program</li>\n</ul>\n<p>It follows that small, incremental steps are the ticket to arrive at a well-designed big program.</p>\n<p>In this agile sense, design is simply about maintaining your ability to easily incorporate the changes of the next iteration. It is vastly different from the BFUD where you try, in advance, to specify exactly where everything will go.</p>\n<h1 id=\"judging-design\" tabindex=\"-1\">Judging Design <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<p>Next up, the author discusses <em>metrics</em> for design, such as class cohesion. There are tools that analyze your code and give you a score on certain metrics, but there's no clear-cut correlation between scores and code quality. You can have high scores and bad design, because you're only looking at proxy measures.</p>\n<p>The <em>true</em> measure of a good design would be something like &quot;cost per feature over the time interval that matters&quot;. But this is incredibly hard to measure.</p>\n<p>What's this time interval thing? Well, when writing any feature, you are dealing with the trade-off of design and cost. Spending more time on making the design good costs time now, and delays the feature, but it reaps benefits further down the line in making other features cheaper to implement. There is an intricate balance: As the author points out, the advantage of having a feature done <em>right now</em> might outweigh the costs associated with fixing a rushed design. It is also a matter of skill: If you are a skilled software engineer, the extra time taken to get the design right will be small, and thus your design efforts will reach a net positive effect rather early. If, on the other hand, you are a novice, you might spend a lot of time on a design that won't even be that good, and thus the effort might actually never pay off.</p>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-10-2-poodr-chapter-1/\">#</a></h1>\n<ul>\n<li>Design is about arranging code such that it can efficiently accommodate change</li>\n<li>Code that is easy to change is a joy to work with</li>\n<li>Principles and patterns are tools, but how to apply them is an art, or a craft</li>\n<li>Avoid under- and overdesigning by understanding the theory of design and learning how to translate that into practice</li>\n</ul>\n<p>Next up, we will be looking at the first principle: The Single Responsibility Principle.</p>\n",
			"date_published": "2020-10-02T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/",
			"url": "https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/",
			"title": "The Law of Demeter - Don&#39;t let your classes micromanage each other",
			"content_html": "<p>Anyone who has ever worked with a micromanaging boss or supervisor knows how demoralizing and inefficient this can be. Instead of being asked to achieve results as they are defined in your role's responsibilities, such a boss tells you in excrutiating detail what steps you should follow.</p>\n<p>Nobody likes a micromanager, and the classes you write in an object oriented language are no different there! They are much happier if you tell them what to do, in terms of their responsibilities, rather than asking them for a detailed report of their internal state and then going off on a long chain of commands.</p>\n<p>This idea is not new, of course, and relates to two important, interlinked concepts: The Law of Demeter, and the &quot;Tell, Don't Ask!&quot; principle. Let's start with a brief introduction and summary of them and then expand on what it means for our code.</p>\n<h2 id=\"the-law-of-demeter\" tabindex=\"-1\">The Law of Demeter <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/\">#</a></h2>\n<p>This law (sometimes snarkily referred to as the &quot;sometimes helpful suggestion&quot; instead) states, at a high level, that your class should not talk to strangers. How does that look like? Suppose you have class, <code>C</code>. That class has a method, <code>f</code>. Inside of <code>f</code> is a bunch of code. You might, for example, want to call some other methods from within <code>f</code>. The Law of Demeter says that you are only allowed to call methods of the following objects:</p>\n<ul>\n<li><code>C</code> itself</li>\n<li>Objects passed to <code>f</code> as arguments</li>\n<li>Any objects that were created or instantiated by <code>f</code></li>\n<li>Component objects (i.e., held in instance variables) of <code>C</code></li>\n</ul>\n<p>Anything else is considered off limits! In particular, if one of the methods that are permitted returns an object that's not in turn part of the permitted list, you cannot call any of its methods! Egregious violation of this law are referred to as <em>train wrecks</em>, and you can recognize them by a lot of dots: <code>car.get_owner().get_address().get_postcal_code()</code>. Yuck! You are micromanaging the application by asking the car to tell you who its owner is, which you then ask where they live, and the address then is supposed to hand you its postal code.</p>\n<p>This might sound overly strict, but I agree in large part with JavaDevGuy in his post <a href=\"https://javadevguy.wordpress.com/2017/05/14/the-genius-of-the-law-of-demeter/\">The Genius of the law of Demeter</a>: It is <em>the</em> law of object oriented programming.</p>\n<h3 id=\"why-is-this-bad-anyway\" tabindex=\"-1\">Why is this bad, anyway? <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/\">#</a></h3>\n<p>When violating the LoD, you are sprinkling unrelated structural knowledge throught your code. Each part of the trainwreck is a piece of knowledge that you assume you have: &quot;In this code, cars have owners, which have addresses, which have postal codes, and they are accessed through these particular methods.&quot; Your trainwreck introduces coupling where it might not be wise to do so. This makes your application hard to change and, ultimately, leads to the famed and feared Spaghetti code.</p>\n<h3 id=\"some-caveats-and-nuances\" tabindex=\"-1\">Some caveats and nuances <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/\">#</a></h3>\n<p>Of course, nothing is ever quite as black and white, so let's unpack a few important points about the law.</p>\n<p>First, you can technically get around the law by introducing wrapper methods: You could add a method <code>getOwnerAddressesPostalCode()</code> to the car object. But in a sense you're still violating the law. Maybe not its text, but definitely its spirit: You are still coupling a postal code to a car where it might be ill-advised.</p>\n<p>Second, contrary what you sometimes read on articles on the subject, the LoD is not <a href=\"https://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/\">a dot-counting exercise</a>. This cuts both ways: On the one hand, just because you don't have multiple dots per line doesn't mean you don't violate the law (see above's lengthy wrapper method). On the other hand, just because you <em>do</em> have multiple dots per line doesn't mean you <em>are</em> violating it. For starters, a method you call might be returning an object that, in turn, is on the list of allowed objects. This is an important feature of so-called <em>fluent</em> interfaces. But even if an object doesn't strictly fall on above's list of allowed objects, it might still make sense to call methods on it: If that object is a <em>friend</em> of yours.</p>\n<p>A clarification, relaxation and expansion of the Law of Demeter states that you can call the methods of any object you are <em>friends</em> with. The objects in the original list above are all friends, but it doesn't stop there. Other examples of friendly classes are given in candied_orange's excellent <a href=\"https://softwareengineering.stackexchange.com/a/322645/161522\">post</a> on the topic:</p>\n<ul>\n<li>Value objects are friendly with everyone. Especially if they are part of the domain you are writing for. Imagine trying to write code for a physics simulator where the Law of Demeter would prohibit you something like <code>wavefunction.amplitude.real</code>. In scientific programming, a lot of the objects that you deal with will be value objects.</li>\n<li>Collections should be friendly with everyone who uses them: If your class holds a list, then clearly it should be able to call a method on the list to get to one of the list's items, and then call a method on these items.</li>\n</ul>\n<h2 id=\"tell-don-t-ask\" tabindex=\"-1\">Tell, Don't Ask <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/\">#</a></h2>\n<p>When faced with a situation where you feel you <em>must</em> violate the Law of Demeter, there's a good chance the overall design is flawed. Sometimes, the violation can be resolvd in syntactic means:</p>\n<p>Imagine you have a method</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b<span class=\"token punctuation\">.</span>get_a<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>then you could instead add a method to <code>b</code> that reads <code>b.tell_a_to_do_something()</code>. Of course that might just be violating the law in spirit anyway, but sometimes it's perfectly appropriate to go this route of delegation.</p>\n<p>Alternatively, if method <code>f</code> needs object <code>A</code> to get its job done, it should ask for it as a parameter:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>And finally, a larger redesign of which objects exist and how they talk to each other might be in order. The guiding principle here goes back to the beginning of the post: Don't micromanage. What is it you want to accomplish? Whose responsibility is that? Tell them, but leave the execution details up to them!</p>\n<p>Another great StackOverflow <a href=\"https://softwareengineering.stackexchange.com/a/284146/161522\">post</a> by user candied_orange talks about the SOLID design principles. In particularly the &quot;Single Responsibility Principle&quot; and the &quot;Dependency Invesion Principle&quot; (more on these later, maybe?) take you in great strides towards code that automatically won't violate the Law of Demeter.</p>\n<h1 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-02-19-Law_of_demeter/\">#</a></h1>\n<p>At the very least, I hope to have convinced you that a long chain of method calls is a <em>code smell</em> that warrants further investigation: Are we micromanaging here, or legitimatly using domain value objects? And could we improve our design, make it more adjustable and modular, in an attempt to remove the violation? A better design might very well result from that!</p>\n",
			"date_published": "2020-02-19T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2020-01-17-Github-workflow/",
			"url": "https://cadolphs.github.io/blog/2020-01-17-Github-workflow/",
			"title": "Some common issues in feature-branch Github workflow",
			"content_html": "<p>This article is a quick overview of the github workflow I currently use with my team. It is mostly for a quick reference to team members about what to do in some of the rarer situations.</p>\n<h1 id=\"basic-setup\" tabindex=\"-1\">Basic setup <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h1>\n<ul>\n<li>Development happens in feature branches that are then squash-merged into a branch <code>develop</code> after a pull request.</li>\n<li>Before sending a PR, a feature-branch should be <strong>rebased</strong> onto <code>develop</code></li>\n<li>It is encouraged that PRs are small but complete.</li>\n</ul>\n<h1 id=\"the-simplest-case\" tabindex=\"-1\">The simplest case <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h1>\n<p>Let’s consider a branch <code>feature1</code> with a bunch of commits to be merged into <code>develop</code>. The easiest case has that branch live in isolation: no other branches branch off of <code>feature1</code>.\nIn this case, all that needs to happen is:</p>\n<p>git checkout feature1\ngit rebase -i origin/develop   ## use this step to clean up commit history a bit\ngit push -f</p>\n<p>And then we create the pull request on github. If everybody is happy, it will be squashed and merged. The branch <code>feature1</code> can now safely be deleted.</p>\n<h2 id=\"what-squash-and-merge-does\" tabindex=\"-1\">What squash-and-merge does <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h2>\n<p>This takes all the commits from the feature branch, creates a new commit that contains all their collective changes, and applies that commit to the develop branch. That way, develop has one commit per pull request.\nThis also means that the two branches now diverge: <code>feature1</code> has a bunch of commits, whereas <code>develop</code> only has one commit. Git doesn’t know that these are essentially the same changes. In the simple case, this doesn’t matter, because we’re deleting <code>feature1</code> anyway!</p>\n<h1 id=\"hard-case-1-extra-development-after-rebase\" tabindex=\"-1\">Hard case 1: Extra development after rebase <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h1>\n<p>Consider this scenario: Branch <code>feature1</code> has been rebased onto <code>develop</code> and sent off for a pull request. After this step, a new branch <code>feature2</code> was created off of <code>feature1</code> to continue some development that relied on the new feature introduced in <code>feature1</code></p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579294479316_image.png\" alt=\"\"></p>\n<h2 id=\"case-1-pr-gets-accepted-without-changes\" tabindex=\"-1\">Case 1: PR gets accepted without changes <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h2>\n<p>Awesome work, no changes. So let’s do the squash-merge. Remember, this creates a new commit:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579294835786_image.png\" alt=\"\"></p>\n<p>So far so good. Now let’s say we’re done with our work on <code>feature2</code> and want to rebase onto <code>develop</code> prior to sending a pull request. If we do this naively, this is what happens:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579294937380_image.png\" alt=\"\"></p>\n<p><strong>YIKES.</strong> Remember that, due to the squash-merge, commit C5 contains the work that was done in commits C2 and C3. But git doesn’t keep track of that. So if we tell it to rebase <code>feature2</code> onto <code>develop</code>, it will grab <em>all</em> commits from <code>feature2</code> that weren’t part of develop. This means C2, C3, and C4. Then it creates new commits that apply those same changes onto <code>develop</code>.\n<strong>The correct way:</strong>\nIn our case, we really only want the commit C4 to be taken from <code>feature2</code> and applied to <code>develop</code>. The way to achieve this is the <code>--onto</code> option of <code>git rebase</code>. Here is what we should have done:</p>\n<p>git checkout feature2\ngit rebase --onto develop feature1\ngit push -f</p>\n<p>What is this? It tells git to:</p>\n<ul>\n<li>Take those commits from <code>feature2</code> that are ahead of <code>feature1</code>. In this case, C4.</li>\n<li>Apply those commits as new commits to <code>develop</code> instead of <code>feature1</code>.</li>\n<li>Make <code>feature2</code> point to the latest of those new commits.\n<img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579295868424_image.png\" alt=\"\"></li>\n</ul>\n<p>(The git playground doesn’t support these sophisticated commands, so instead of saying C4’ it says C6).\nNow C6 contains the changes of C4, but applied to develop.</p>\n<h2 id=\"case-2-extra-changes-to-feature1\" tabindex=\"-1\">Case 2: Extra changes to feature1 <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h2>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579295694877_image.png\" alt=\"\"></p>\n<p>Here our PR in <code>feature1</code> got accepted with some revisions. C6 now contains the work of C2, C3, and C5. On the other hand, <code>feature2</code> has diverged from <code>feature1</code>.\nThere’s two ways to deal with this. Let’s do the one that’s easier conceptually: If <code>C4</code> was coming <em>after</em> C5, we could use the solution of the previous chapter. So let’s make it so:</p>\n<p>git checkout feature2\ngit rebase feature1\ngit rebase --onto develop feature1\ngit push -f</p>\n<p>The first two lines give</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579296061588_image.png\" alt=\"\"></p>\n<p>which is the same as in the previous chapter, so the rebase-onto works.</p>\n<p>But if we think about it for a bit, we could have skipped that intermediate step and just used the <code>rebase</code> <code>--``onto</code> from the start: Our first rebase grabs C4 and makes a new commit that makes it apply to <code>feature1</code>. The next rebase grabs C4’ and makes that apply to <code>develop</code>. So why not just grab C4 and apply that directly to develop? So then the faster version is</p>\n<p>git checkout feature2\ngit rebase --onto develop feature1\ngit push -f</p>\n<h1 id=\"hard-case-2-multiple-people-on-branch\" tabindex=\"-1\">Hard case 2: Multiple people on branch <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h1>\n<p>There are several pitfalls with this, but they can all be avoided with proper care. Let’s take a look:</p>\n<h2 id=\"beware-the-rebase\" tabindex=\"-1\">Beware the rebase <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h2>\n<p>Rebasing a branch changes the commits in its history. That’s why, after a rebase, you have to push with the <code>-f</code> (force!) option. It also means that, once it’s been pushed, anybody who was also working on that branch now has a local version that’s in conflict with the remote version.\n<strong>Important:</strong> Before doing a rebase on a branch with multiple collaborators, let everybody know! Make sure everybody’s local changes are integrated (see below) and all local branches are up to date with the origin. Then do the rebase and force-push. After that, everybody else needs to run</p>\n<p>git checkout branch_that_was_rebased\ngit fetch --all\ngit reset --hard origin/branch_that_was_rebased</p>\n<p>This makes your local version of the branch the same as the remote version that was just forcefully pushed</p>\n<h2 id=\"don-t-create-a-bajillion-merge-commits\" tabindex=\"-1\">Don’t create a bajillion merge commits <a class=\"header-anchor\" href=\"https://cadolphs.github.io/blog/2020-01-17-Github-workflow/\">#</a></h2>\n<p>Let’s say you and your buddy are working on the same branch (but on different files). You are constantly committing, pushing, and pulling. Now each time there were “simultaneous” commits and you do a git push / pull, you’ll create extra merge commits:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579297102356_image.png\" alt=\"Real work was done in C2 and C3, whereas C4 is just a merge commit\"></p>\n<p>The reason is this: You can’t push your local branch to origin unless it’s a “fast forward”, i.e., there’s no changes in the origin that you don’t have locally. One way to get those remote changes is <code>git pull</code>. This is nothing other than a <code>git merge</code> of the remote commits into your local branch, so unless it’s again a simple fast-forward, it’ll create an extra merge commit. A productive coding session can create quite a few of those, and they’ll needlessly clutter up the commit history.</p>\n<p>Ideally, we want merge commits to have “real” meaning, as in “this new feature was developed in this branch and upon completion merged into our development branch”. It shouldn’t reflect minute details of who worked on what file in the run-up to it.</p>\n<p><strong>The solution:</strong> Use <code>git pull</code> <code>--``rebase</code> instead. This tells <code>git</code> to take the remote changes and replay your local changes on top of them:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579297414683_image.png\" alt=\"Before the git pull --rebase\">\n<img src=\"https://paper-attachments.dropbox.com/s_FE834B07340B42F115869E47B3A6D36A022DFDF5AFB60F065BB8B3DFF3BFD3B8_1579297500275_image.png\" alt=\"After the git pull --rebase\"></p>\n<p>Since we’re rebasing, there won’t be a separate merge commit, and now we can use <code>git push</code> without problem, since it’ll be a simple fast-forward.\n<strong>Note:</strong> In the previous section I talked about the pitfalls of a rebase when multiple people were using a branch. This does <strong>not</strong> apply to <code>git pull</code> <code>--``rebase</code>. It is completely safe to use, because it only affects exactly those commits that are currently on your machine and not on remote.</p>\n",
			"date_published": "2020-01-17T00:00:00Z"
		}
		,
		{
			"id": "https://cadolphs.github.io/blog/2019-12-4-Advent-of-code-2019/",
			"url": "https://cadolphs.github.io/blog/2019-12-4-Advent-of-code-2019/",
			"title": "Advent of Code 2019",
			"content_html": "<p>I'm participating again in this year's <a href=\"https://adventofcode.com/2019\">Advent of Code</a>.</p>\n<p>I enjoy this coding challenge as the problems are usually small enough to be solved\nwithout too much boilerplate and overhead, but tricky enough to really make you think.</p>\n<p>This year, I am trying out to use rather strict Test Driven Development (TDD) principles\nto arrive at clean code and clean design for the solutions. My attempts are shared\non <a href=\"https://github.com/cadolphs/advent_of_code_2019\">GitHub</a>.</p>\n",
			"date_published": "2019-12-04T00:00:00Z"
		}
		
	]
}
